{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/token.ts","../src/entities/baseCurrency.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  HOPE = 1337\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.GOERLI]: '0x2a23e40939af1eC45694601DBDdf132a5a296d13',\n  [ChainId.SEPOLIA]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.HOPE]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A'\n}\n\nexport const INIT_CODE_HASH_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.GOERLI]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.SEPOLIA]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.HOPE]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}","import invariant from 'tiny-invariant'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\nexport interface SerializedToken {\n  chainId: number\n  address: string\n  decimals: number\n  symbol: string\n  name?: string\n  projectLink?: string\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false as const\n\n  public readonly isToken: true = true as const\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public readonly projectLink?: string\n\n  public constructor(\n      chainId: number,\n      address: string,\n      decimals: number,\n      symbol: string,\n      name?: string,\n      projectLink?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.address = address\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  public get serialize(): SerializedToken {\n    return {\n      address: this.address,\n      chainId: this.chainId,\n      decimals: this.decimals,\n      symbol: this.symbol,\n      name: this.name,\n      projectLink: this.projectLink,\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport type { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n\n  /**\n   * Returns whether the currency is a token that is usable in PancakeSwap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol: string\n\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the PancakeSwap contracts. Currencies must\n   * implement this to be used in PancakeSwap\n   */\n  public abstract get wrapped(): Token\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\nimport {Currency, CurrencyAmount, Percent, Price} from \"entities\";\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n    midPrice: Price<TBase, TQuote>,\n    inputAmount: CurrencyAmount<TBase>,\n    outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n  \n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport {BigintIsh, MaxUint256, Rounding} from '../../constants';\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n      currency: T,\n      numerator: BigintIsh,\n      denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n      decimalPlaces: number = this.currency.decimals,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { BigintIsh, Rounding } from '../../constants'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n      ...args:\n          | [TBase, TQuote, BigintIsh, BigintIsh]\n          | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase\n    let quoteCurrency: TQuote\n    let denominator: BigintIsh\n    let numerator: BigintIsh\n\n    if (args.length === 4) {\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {FACTORY_ADDRESS_MAP, INIT_CODE_HASH_MAP, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO, BigintIsh} from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from '../entities/token';\nimport { CurrencyAmount, Price } from '../entities/fractions';\nimport { sqrt } from '../utils';\n\nexport const computePairAddress = ({\n                                       factoryAddress,\n                                       tokenA,\n                                       tokenB\n                                   }: {\n    factoryAddress: string\n    tokenA: Token\n    tokenB: Token\n}): string => {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    return getCreate2Address(\n        factoryAddress,\n        keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n        INIT_CODE_HASH_MAP[token0.chainId]\n    )\n}\nexport class Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n    public static getAddress(tokenA: Token, tokenB: Token): string {\n        return computePairAddress({ factoryAddress: FACTORY_ADDRESS_MAP[tokenA.chainId], tokenA, tokenB })\n    }\n\n    public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n        const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [currencyAmountA, tokenAmountB]\n            : [tokenAmountB, currencyAmountA]\n        this.liquidityToken = new Token(\n            tokenAmounts[0].currency.chainId,\n            Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n            18,\n            'UNI-V2',\n            'Uniswap V2'\n        )\n        this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n     */\n    public get token0Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n        return new Price(this.token0, this.token1, result.denominator, result.numerator)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n    public get token1Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n        return new Price(this.token1, this.token0, result.denominator, result.numerator)\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceOf(token: Token): Price<Token, Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): number {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].currency\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].currency\n    }\n\n    public get reserve0(): CurrencyAmount<Token> {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): CurrencyAmount<Token> {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n        if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.currency)\n        const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n        const outputAmount = CurrencyAmount.fromRawAmount(\n            inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.quotient, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.quotient, ZERO) ||\n            JSBI.equal(this.reserve1.quotient, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.currency)\n        const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n        const inputAmount = CurrencyAmount.fromRawAmount(\n            outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: CurrencyAmount<Token>,\n        tokenAmountA: CurrencyAmount<Token>,\n        tokenAmountB: CurrencyAmount<Token>\n    ): CurrencyAmount<Token> {\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.quotient, ZERO)) {\n            liquidity = JSBI.subtract(\n                sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n                MINIMUM_LIQUIDITY\n            )\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: CurrencyAmount<Token>,\n        liquidity: CurrencyAmount<Token>,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: CurrencyAmount<Token>\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = JSBI.BigInt(kLast.toString())\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return CurrencyAmount.fromRawAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n        )\n    }\n}","import invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Currency } from '../entities/currency'\nimport { Token } from '../entities/token'\nimport { Price } from '../entities/fractions'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n        pairs.every((pair) => pair.chainId === chainId),\n        'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n          this.path[i].equals(pair.token0)\n              ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n              : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { ONE, TradeType, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { Currency } from '../entities/currency'\nimport { CurrencyAmount, Fraction, Percent, Price } from '../entities/fractions'\nimport { Token } from '../entities/token'\nimport { computePriceImpact, sortedInsert } from '../utils'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n    a: InputOutput<TInput, TOutput>,\n    b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    a: Trade<TInput, TOutput, TTradeType>,\n    b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n      route: Route<TInput, TOutput>,\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n      tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          tokenAmounts[tokenAmounts.length - 1].numerator,\n          tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n          route.input,\n          tokenAmounts[0].numerator,\n          tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n          .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyAmountIn: CurrencyAmount<TInput>,\n      currencyOut: TOutput,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n                currencyAmountIn,\n                TradeType.EXACT_INPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n            pairsExcludingThisPair,\n            currencyAmountIn,\n            currencyOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [...currentPairs, pair],\n            amountOut,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.maximumAmountIn(slippageTolerance).quotient,\n        this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyIn: TInput,\n      currencyAmountOut: CurrencyAmount<TOutput>,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n                currencyAmountOut,\n                TradeType.EXACT_OUTPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n            pairsExcludingThisPair,\n            currencyIn,\n            currencyAmountOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [pair, ...currentPairs],\n            amountIn,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}","import invariant from 'tiny-invariant'\nimport {Currency, CurrencyAmount, Percent, Token, Trade} from './entities'\nimport { validateAndParseAddress } from './utils'\nimport { TradeType } from './constants'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n      trade: Trade<Currency, Currency, TradeType>,\n      options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n        'ttl' in options\n            ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n            : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n\n    // eslint-disable-next-line default-case\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\nimport {CurrencyAmount} from \"entities\";\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n      chainId: ChainId,\n      address: string,\n      provider = getDefaultProvider(getNetwork(chainId)),\n      symbol: string,\n      name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n        typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n            ? TOKEN_DECIMALS_CACHE[chainId][address]\n            : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n              TOKEN_DECIMALS_CACHE = {\n                ...TOKEN_DECIMALS_CACHE,\n                [chainId]: {\n                  ...TOKEN_DECIMALS_CACHE?.[chainId],\n                  [address]: decimals,\n                },\n              }\n              return decimals\n            })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(\n        CurrencyAmount.fromRawAmount(tokenA, balances[0]),\n        CurrencyAmount.fromRawAmount(tokenB, balances[1])\n    )\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS_MAP","MAINNET","GOERLI","SEPOLIA","HOPE","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MaxUint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Token","chainId","address","decimals","symbol","projectLink","equals","other","isToken","this","sortsBefore","invariant","toLowerCase","Number","isSafeInteger","isInteger","parseBigintIsh","bigintIsh","toString","sqrt","y","value","solidityType","greaterThanOrEqual","lessThanOrEqual","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","CurrencyAmount","currency","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","wrapped","Price","baseCurrency","quoteCurrency","args","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","Pair","currencyAmountA","tokenAmountB","tokenAmounts","liquidityToken","getAddress","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","input","output","every","pair","wrappedInput","path","entries","currentInput","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","quotedOutputAmount","Array","EXACT_INPUT","i","executionPrice","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}