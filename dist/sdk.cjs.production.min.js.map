{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/token.ts","../src/entities/baseCurrency.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/utils.ts","../src/entities/trade.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  HOPE = 1337\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.GOERLI]: '0x2a23e40939af1eC45694601DBDdf132a5a296d13',\n  [ChainId.SEPOLIA]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.HOPE]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A'\n}\n\nexport const INIT_CODE_HASH_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.GOERLI]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.SEPOLIA]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.HOPE]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}","import invariant from 'tiny-invariant'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\nexport interface SerializedToken {\n  chainId: number\n  address: string\n  decimals: number\n  symbol: string\n  name?: string\n  projectLink?: string\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false as const\n\n  public readonly isToken: true = true as const\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public readonly projectLink?: string\n\n  public constructor(\n      chainId: number,\n      address: string,\n      decimals: number,\n      symbol: string,\n      name?: string,\n      projectLink?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.address = address\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  public get serialize(): SerializedToken {\n    return {\n      address: this.address,\n      chainId: this.chainId,\n      decimals: this.decimals,\n      symbol: this.symbol,\n      name: this.name,\n      projectLink: this.projectLink,\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport type { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n\n  /**\n   * Returns whether the currency is a token that is usable in PancakeSwap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol: string\n\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the PancakeSwap contracts. Currencies must\n   * implement this to be used in PancakeSwap\n   */\n  public abstract get wrapped(): Token\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {FACTORY_ADDRESS_MAP, INIT_CODE_HASH_MAP, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO, BigintIsh} from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport {Token} from \"entities/token\";\nimport {CurrencyAmount, Price} from \"entities/fractions\";\nimport {sqrt} from \"utils\";\n\nexport const computePairAddress = ({\n                                       factoryAddress,\n                                       tokenA,\n                                       tokenB\n                                   }: {\n    factoryAddress: string\n    tokenA: Token\n    tokenB: Token\n}): string => {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    return getCreate2Address(\n        factoryAddress,\n        keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n        INIT_CODE_HASH_MAP[token0.chainId]\n    )\n}\nexport class Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n    public static getAddress(tokenA: Token, tokenB: Token): string {\n        return computePairAddress({ factoryAddress: FACTORY_ADDRESS_MAP[tokenA.chainId], tokenA, tokenB })\n    }\n\n    public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n        const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [currencyAmountA, tokenAmountB]\n            : [tokenAmountB, currencyAmountA]\n        this.liquidityToken = new Token(\n            tokenAmounts[0].currency.chainId,\n            Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n            18,\n            'UNI-V2',\n            'Uniswap V2'\n        )\n        this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n     */\n    public get token0Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n        return new Price(this.token0, this.token1, result.denominator, result.numerator)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n    public get token1Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n        return new Price(this.token1, this.token0, result.denominator, result.numerator)\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceOf(token: Token): Price<Token, Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): number {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].currency\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].currency\n    }\n\n    public get reserve0(): CurrencyAmount<Token> {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): CurrencyAmount<Token> {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n        if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.currency)\n        const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n        const outputAmount = CurrencyAmount.fromRawAmount(\n            inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.quotient, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.quotient, ZERO) ||\n            JSBI.equal(this.reserve1.quotient, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.currency)\n        const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n        const inputAmount = CurrencyAmount.fromRawAmount(\n            outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: CurrencyAmount<Token>,\n        tokenAmountA: CurrencyAmount<Token>,\n        tokenAmountB: CurrencyAmount<Token>\n    ): CurrencyAmount<Token> {\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.quotient, ZERO)) {\n            liquidity = JSBI.subtract(\n                sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n                MINIMUM_LIQUIDITY\n            )\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: CurrencyAmount<Token>,\n        liquidity: CurrencyAmount<Token>,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: CurrencyAmount<Token>\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = JSBI.BigInt(kLast.toString())\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return CurrencyAmount.fromRawAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n        )\n    }\n}","import invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport {Currency} from \"entities/currency\";\nimport {Token} from \"entities/token\";\nimport {Price} from \"entities/fractions\";\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n        pairs.every((pair) => pair.chainId === chainId),\n        'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n          this.path[i].equals(pair.token0)\n              ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n              : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\nimport {Currency, CurrencyAmount, Percent, Price} from \"entities\";\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n    midPrice: Price<TBase, TQuote>,\n    inputAmount: CurrencyAmount<TBase>,\n    outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { ONE, TradeType, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { Currency } from 'entities/currency'\nimport { CurrencyAmount, Fraction, Percent, Price } from 'entities/fractions'\nimport { Token } from 'entities/token'\nimport { computePriceImpact, sortedInsert } from '../utils'\nimport { InsufficientInputAmountError, InsufficientReservesError } from 'errors'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n    a: InputOutput<TInput, TOutput>,\n    b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    a: Trade<TInput, TOutput, TTradeType>,\n    b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n      route: Route<TInput, TOutput>,\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n      tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          tokenAmounts[tokenAmounts.length - 1].numerator,\n          tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n          route.input,\n          tokenAmounts[0].numerator,\n          tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n          .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyAmountIn: CurrencyAmount<TInput>,\n      currencyOut: TOutput,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n                currencyAmountIn,\n                TradeType.EXACT_INPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n            pairsExcludingThisPair,\n            currencyAmountIn,\n            currencyOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [...currentPairs, pair],\n            amountOut,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.maximumAmountIn(slippageTolerance).quotient,\n        this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyIn: TInput,\n      currencyAmountOut: CurrencyAmount<TOutput>,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n                currencyAmountOut,\n                TradeType.EXACT_OUTPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n            pairsExcludingThisPair,\n            currencyIn,\n            currencyAmountOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [pair, ...currentPairs],\n            amountIn,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n  \n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport {BigintIsh, MaxUint256, Rounding} from '../../constants';\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n      currency: T,\n      numerator: BigintIsh,\n      denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n      decimalPlaces: number = this.currency.decimals,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { BigintIsh, Rounding } from '../../constants'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n      ...args:\n          | [TBase, TQuote, BigintIsh, BigintIsh]\n          | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase\n    let quoteCurrency: TQuote\n    let denominator: BigintIsh\n    let numerator: BigintIsh\n\n    if (args.length === 4) {\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport {Currency, CurrencyAmount, Percent, Token, Trade} from './entities'\nimport { validateAndParseAddress } from './utils'\nimport { TradeType } from './constants'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n      trade: Trade<Currency, Currency, TradeType>,\n      options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n        'ttl' in options\n            ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n            : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n\n    // eslint-disable-next-line default-case\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\nimport {CurrencyAmount} from \"entities\";\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n      chainId: ChainId,\n      address: string,\n      provider = getDefaultProvider(getNetwork(chainId)),\n      symbol: string,\n      name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n        typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n            ? TOKEN_DECIMALS_CACHE[chainId][address]\n            : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n              TOKEN_DECIMALS_CACHE = {\n                ...TOKEN_DECIMALS_CACHE,\n                [chainId]: {\n                  ...TOKEN_DECIMALS_CACHE?.[chainId],\n                  [address]: decimals,\n                },\n              }\n              return decimals\n            })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(\n        CurrencyAmount.fromRawAmount(tokenA, balances[0]),\n        CurrencyAmount.fromRawAmount(tokenB, balances[1])\n    )\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS_MAP","MAINNET","GOERLI","SEPOLIA","HOPE","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_100","_997","_1000","uint8","uint256","MaxUint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Token","chainId","address","decimals","symbol","projectLink","equals","other","isToken","this","sortsBefore","invariant","toLowerCase","Number","isSafeInteger","isInteger","computePairAddress","factoryAddress","tokenA","tokenB","token0","getCreate2Address","keccak256","pack","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","getAddress","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","toString","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","parseBigintIsh","bigintIsh","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","quotedOutputAmount","Array","EXACT_INPUT","i","fromFractionalAmount","executionPrice","midPrice","quote","Percent","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","otherParsed","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","decimalScale","exponentiate","rawAmount","added","subtracted","multiplied","divided","_Fraction","toExact","baseCurrency","quoteCurrency","args","quoteAmount","baseAmount","scalar","fraction","currencyAmount","adjustedForDecimals","toHex","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}