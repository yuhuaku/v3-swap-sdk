{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/baseCurrency.ts","../src/entities/token.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/entities/nativeCurrency.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  HOPE = 1337\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.GOERLI]: '0x2a23e40939af1eC45694601DBDdf132a5a296d13',\n  [ChainId.SEPOLIA]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.HOPE]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A'\n}\n\nexport const INIT_CODE_HASH_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.GOERLI]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.SEPOLIA]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.HOPE]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport type { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n\n  /**\n   * Returns whether the currency is a token that is usable in PancakeSwap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol: string\n\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the PancakeSwap contracts. Currencies must\n   * implement this to be used in PancakeSwap\n   */\n  public abstract get wrapped(): Token\n}\n","import invariant from 'tiny-invariant'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\nexport interface SerializedToken {\n  chainId: number\n  address: string\n  decimals: number\n  symbol: string\n  name?: string\n  projectLink?: string\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false as const\n\n  public readonly isToken: true = true as const\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public readonly projectLink?: string\n\n  public constructor(\n      chainId: number,\n      address: string,\n      decimals: number,\n      symbol: string,\n      name?: string,\n      projectLink?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.address = address\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  public get serialize(): SerializedToken {\n    return {\n      address: this.address,\n      chainId: this.chainId,\n      decimals: this.decimals,\n      symbol: this.symbol,\n      name: this.name,\n      projectLink: this.projectLink,\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\nimport {Currency, CurrencyAmount, Percent, Price} from \"entities\";\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n    midPrice: Price<TBase, TQuote>,\n    inputAmount: CurrencyAmount<TBase>,\n    outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n  \n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport {BigintIsh, MaxUint256, Rounding} from '../../constants';\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n      currency: T,\n      numerator: BigintIsh,\n      denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n      decimalPlaces: number = this.currency.decimals,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { BigintIsh, Rounding } from '../../constants'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n      ...args:\n          | [TBase, TQuote, BigintIsh, BigintIsh]\n          | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase\n    let quoteCurrency: TQuote\n    let denominator: BigintIsh\n    let numerator: BigintIsh\n\n    if (args.length === 4) {\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {FACTORY_ADDRESS_MAP, INIT_CODE_HASH_MAP, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO, BigintIsh} from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from '../entities/token';\nimport { CurrencyAmount, Price } from '../entities/fractions';\nimport { sqrt } from '../utils';\n\nexport const computePairAddress = ({\n                                       factoryAddress,\n                                       tokenA,\n                                       tokenB\n                                   }: {\n    factoryAddress: string\n    tokenA: Token\n    tokenB: Token\n}): string => {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    return getCreate2Address(\n        factoryAddress,\n        keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n        INIT_CODE_HASH_MAP[token0.chainId]\n    )\n}\nexport class Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n    public static getAddress(tokenA: Token, tokenB: Token): string {\n        return computePairAddress({ factoryAddress: FACTORY_ADDRESS_MAP[tokenA.chainId], tokenA, tokenB })\n    }\n\n    public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n        const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [currencyAmountA, tokenAmountB]\n            : [tokenAmountB, currencyAmountA]\n        this.liquidityToken = new Token(\n            tokenAmounts[0].currency.chainId,\n            Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n            18,\n            'UNI-V2',\n            'Uniswap V2'\n        )\n        this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n     */\n    public get token0Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n        return new Price(this.token0, this.token1, result.denominator, result.numerator)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n    public get token1Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n        return new Price(this.token1, this.token0, result.denominator, result.numerator)\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceOf(token: Token): Price<Token, Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): number {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].currency\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].currency\n    }\n\n    public get reserve0(): CurrencyAmount<Token> {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): CurrencyAmount<Token> {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n        if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.currency)\n        const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n        const outputAmount = CurrencyAmount.fromRawAmount(\n            inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.quotient, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.quotient, ZERO) ||\n            JSBI.equal(this.reserve1.quotient, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.currency)\n        const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n        const inputAmount = CurrencyAmount.fromRawAmount(\n            outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: CurrencyAmount<Token>,\n        tokenAmountA: CurrencyAmount<Token>,\n        tokenAmountB: CurrencyAmount<Token>\n    ): CurrencyAmount<Token> {\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.quotient, ZERO)) {\n            liquidity = JSBI.subtract(\n                sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n                MINIMUM_LIQUIDITY\n            )\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: CurrencyAmount<Token>,\n        liquidity: CurrencyAmount<Token>,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: CurrencyAmount<Token>\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = JSBI.BigInt(kLast.toString())\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return CurrencyAmount.fromRawAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n        )\n    }\n}","import invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Currency } from '../entities/currency'\nimport { Token } from '../entities/token'\nimport { Price } from '../entities/fractions'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n        pairs.every((pair) => pair.chainId === chainId),\n        'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n          this.path[i].equals(pair.token0)\n              ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n              : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { ONE, TradeType, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { Currency } from '../entities/currency'\nimport { CurrencyAmount, Fraction, Percent, Price } from '../entities/fractions'\nimport { Token } from '../entities/token'\nimport { computePriceImpact, sortedInsert } from '../utils'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n    a: InputOutput<TInput, TOutput>,\n    b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    a: Trade<TInput, TOutput, TTradeType>,\n    b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n      route: Route<TInput, TOutput>,\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n      tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          tokenAmounts[tokenAmounts.length - 1].numerator,\n          tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n          route.input,\n          tokenAmounts[0].numerator,\n          tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n          .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyAmountIn: CurrencyAmount<TInput>,\n      currencyOut: TOutput,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n                currencyAmountIn,\n                TradeType.EXACT_INPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n            pairsExcludingThisPair,\n            currencyAmountIn,\n            currencyOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [...currentPairs, pair],\n            amountOut,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.maximumAmountIn(slippageTolerance).quotient,\n        this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyIn: TInput,\n      currencyAmountOut: CurrencyAmount<TOutput>,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n                currencyAmountOut,\n                TradeType.EXACT_OUTPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n            pairsExcludingThisPair,\n            currencyIn,\n            currencyAmountOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [pair, ...currentPairs],\n            amountIn,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n\n  public readonly isToken: false = false\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n    [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n    [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n    [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n    [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n    [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n    protected constructor(chainId: number) {\n        super(chainId, 18, 'ETH', 'Ether')\n    }\n\n    public get wrapped(): Token {\n        const weth9 = WETH9[this.chainId]\n        invariant(!!weth9, 'WRAPPED')\n        return weth9\n    }\n\n    private static _etherCache: { [chainId: number]: Ether } = {}\n\n    public static onChain(chainId: number): Ether {\n        return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n    }\n\n    public equals(other: Currency): boolean {\n        return other.isNative && other.chainId === this.chainId\n    }\n}","import invariant from 'tiny-invariant'\nimport {Currency, CurrencyAmount, Percent, Token, Trade} from './entities'\nimport { validateAndParseAddress } from './utils'\nimport { TradeType } from './constants'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n      trade: Trade<Currency, Currency, TradeType>,\n      options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n        'ttl' in options\n            ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n            : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n\n    // eslint-disable-next-line default-case\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\nimport {CurrencyAmount} from \"entities\";\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n      chainId: ChainId,\n      address: string,\n      provider = getDefaultProvider(getNetwork(chainId)),\n      symbol: string,\n      name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n        typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n            ? TOKEN_DECIMALS_CACHE[chainId][address]\n            : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n              TOKEN_DECIMALS_CACHE = {\n                ...TOKEN_DECIMALS_CACHE,\n                [chainId]: {\n                  ...TOKEN_DECIMALS_CACHE?.[chainId],\n                  [address]: decimals,\n                },\n              }\n              return decimals\n            })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(\n        CurrencyAmount.fromRawAmount(tokenA, balances[0]),\n        CurrencyAmount.fromRawAmount(tokenB, balances[1])\n    )\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS_MAP","MAINNET","GOERLI","SEPOLIA","HOPE","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MaxUint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","BaseCurrency","chainId","decimals","symbol","Number","isSafeInteger","invariant","isInteger","Token","address","projectLink","equals","other","isToken","sortsBefore","toLowerCase","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","lessThanOrEqual","validateAndParseAddress","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","quote","priceImpact","subtract","Percent","numerator","denominator","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","invert","otherParsed","equal","multiply","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","CurrencyAmount","currency","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","wrapped","Price","baseCurrency","quoteCurrency","args","result","quoteAmount","baseAmount","scalar","fraction","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","Pair","currencyAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputReserve","outputReserve","inputAmountWithFee","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","input","output","every","pair","wrappedInput","path","entries","i","currentInput","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","NativeCurrency","WETH9","Ether","onChain","_etherCache","isNative","weth9","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}