{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/baseCurrency.ts","../src/entities/token.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/utils.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  HOPE = 1337\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.GOERLI]: '0x2a23e40939af1eC45694601DBDdf132a5a296d13',\n  [ChainId.SEPOLIA]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A',\n  [ChainId.HOPE]: '0x78B210a67c3045392bC3a00fC9D7cC7319B3E18A'\n}\n\nexport const INIT_CODE_HASH_MAP:{[chainId: number]: string} = {\n  [ChainId.MAINNET]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.GOERLI]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.SEPOLIA]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c',\n  [ChainId.HOPE]: '0x0fe0976a8394a59cb43ce8ed266ed3ad7b48c0538114ef1bea17c3f7f4138f2c'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport type { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n\n  /**\n   * Returns whether the currency is a token that is usable in PancakeSwap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol: string\n\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the PancakeSwap contracts. Currencies must\n   * implement this to be used in PancakeSwap\n   */\n  public abstract get wrapped(): Token\n}\n","import invariant from 'tiny-invariant'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\nexport interface SerializedToken {\n  chainId: number\n  address: string\n  decimals: number\n  symbol: string\n  name?: string\n  projectLink?: string\n}\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false as const\n\n  public readonly isToken: true = true as const\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public readonly projectLink?: string\n\n  public constructor(\n      chainId: number,\n      address: string,\n      decimals: number,\n      symbol: string,\n      name?: string,\n      projectLink?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.address = address\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  public get serialize(): SerializedToken {\n    return {\n      address: this.address,\n      chainId: this.chainId,\n      decimals: this.decimals,\n      symbol: this.symbol,\n      name: this.name,\n      projectLink: this.projectLink,\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {FACTORY_ADDRESS_MAP, INIT_CODE_HASH_MAP, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO, BigintIsh} from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport {Token} from \"entities/token\";\nimport {CurrencyAmount, Price} from \"entities/fractions\";\nimport {sqrt} from \"utils\";\n\nexport const computePairAddress = ({\n                                       factoryAddress,\n                                       tokenA,\n                                       tokenB\n                                   }: {\n    factoryAddress: string\n    tokenA: Token\n    tokenB: Token\n}): string => {\n    const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    return getCreate2Address(\n        factoryAddress,\n        keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n        INIT_CODE_HASH_MAP[token0.chainId]\n    )\n}\nexport class Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n    public static getAddress(tokenA: Token, tokenB: Token): string {\n        return computePairAddress({ factoryAddress: FACTORY_ADDRESS_MAP[tokenA.chainId], tokenA, tokenB })\n    }\n\n    public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n        const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [currencyAmountA, tokenAmountB]\n            : [tokenAmountB, currencyAmountA]\n        this.liquidityToken = new Token(\n            tokenAmounts[0].currency.chainId,\n            Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n            18,\n            'UNI-V2',\n            'Uniswap V2'\n        )\n        this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n     */\n    public get token0Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n        return new Price(this.token0, this.token1, result.denominator, result.numerator)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n    public get token1Price(): Price<Token, Token> {\n        const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n        return new Price(this.token1, this.token0, result.denominator, result.numerator)\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceOf(token: Token): Price<Token, Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): number {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].currency\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].currency\n    }\n\n    public get reserve0(): CurrencyAmount<Token> {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): CurrencyAmount<Token> {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n        if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.currency)\n        const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n        const outputAmount = CurrencyAmount.fromRawAmount(\n            inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.quotient, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n        invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.quotient, ZERO) ||\n            JSBI.equal(this.reserve1.quotient, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.currency)\n        const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n        const inputAmount = CurrencyAmount.fromRawAmount(\n            outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: CurrencyAmount<Token>,\n        tokenAmountA: CurrencyAmount<Token>,\n        tokenAmountB: CurrencyAmount<Token>\n    ): CurrencyAmount<Token> {\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.quotient, ZERO)) {\n            liquidity = JSBI.subtract(\n                sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n                MINIMUM_LIQUIDITY\n            )\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: CurrencyAmount<Token>,\n        liquidity: CurrencyAmount<Token>,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): CurrencyAmount<Token> {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: CurrencyAmount<Token>\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = JSBI.BigInt(kLast.toString())\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return CurrencyAmount.fromRawAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n        )\n    }\n}","import invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport {Currency} from \"entities/currency\";\nimport {Token} from \"entities/token\";\nimport {Price} from \"entities/fractions\";\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n        pairs.every((pair) => pair.chainId === chainId),\n        'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n          this.path[i].equals(pair.token0)\n              ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n              : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { ONE, TradeType, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport {Currency} from \"entities/currency\";\nimport {CurrencyAmount, Fraction, Percent, Price} from \"entities/fractions\";\nimport {Token} from \"entities/token\";\nimport { computePriceImpact, sortedInsert } from \"utils\";\nimport {InsufficientInputAmountError, InsufficientReservesError} from \"errors\";\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n    a: InputOutput<TInput, TOutput>,\n    b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    a: Trade<TInput, TOutput, TTradeType>,\n    b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n      route: Route<TInput, TOutput>,\n      amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n      route: Route<TInput, TOutput>,\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n      tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          tokenAmounts[tokenAmounts.length - 1].numerator,\n          tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n          route.input,\n          tokenAmounts[0].numerator,\n          tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n          .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyAmountIn: CurrencyAmount<TInput>,\n      currencyOut: TOutput,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n                currencyAmountIn,\n                TradeType.EXACT_INPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n            pairsExcludingThisPair,\n            currencyAmountIn,\n            currencyOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [...currentPairs, pair],\n            amountOut,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.maximumAmountIn(slippageTolerance).quotient,\n        this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n      pairs: Pair[],\n      currencyIn: TInput,\n      currencyAmountOut: CurrencyAmount<TOutput>,\n      { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n      // used in recursion.\n      currentPairs: Pair[] = [],\n      nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n      bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n            bestTrades,\n            new Trade(\n                new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n                currencyAmountOut,\n                TradeType.EXACT_OUTPUT\n            ),\n            maxNumResults,\n            tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n            pairsExcludingThisPair,\n            currencyIn,\n            currencyAmountOut,\n            {\n              maxNumResults,\n              maxHops: maxHops - 1\n            },\n            [pair, ...currentPairs],\n            amountIn,\n            bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\nimport {Currency, CurrencyAmount, Percent, Price} from \"entities\";\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n    midPrice: Price<TBase, TQuote>,\n    inputAmount: CurrencyAmount<TBase>,\n    outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n  \n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport {BigintIsh, MaxUint256, Rounding} from '../../constants';\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n      currency: T,\n      numerator: BigintIsh,\n      denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n      decimalPlaces: number = this.currency.decimals,\n      format?: object,\n      rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { BigintIsh, Rounding } from '../../constants'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n      ...args:\n          | [TBase, TQuote, BigintIsh, BigintIsh]\n          | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase\n    let quoteCurrency: TQuote\n    let denominator: BigintIsh\n    let numerator: BigintIsh\n\n    if (args.length === 4) {\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n        JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport {Currency, CurrencyAmount, Percent, Token, Trade} from './entities'\nimport { validateAndParseAddress } from './utils'\nimport { TradeType } from './constants'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n      trade: Trade<Currency, Currency, TradeType>,\n      options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n        'ttl' in options\n            ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n            : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n\n    // eslint-disable-next-line default-case\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\nimport {CurrencyAmount} from \"entities\";\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n      chainId: ChainId,\n      address: string,\n      provider = getDefaultProvider(getNetwork(chainId)),\n      symbol: string,\n      name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n        typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n            ? TOKEN_DECIMALS_CACHE[chainId][address]\n            : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n              TOKEN_DECIMALS_CACHE = {\n                ...TOKEN_DECIMALS_CACHE,\n                [chainId]: {\n                  ...TOKEN_DECIMALS_CACHE?.[chainId],\n                  [address]: decimals,\n                },\n              }\n              return decimals\n            })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(\n        CurrencyAmount.fromRawAmount(tokenA, balances[0]),\n        CurrencyAmount.fromRawAmount(tokenB, balances[1])\n    )\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS_MAP","MAINNET","GOERLI","SEPOLIA","HOPE","INIT_CODE_HASH_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MaxUint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","BaseCurrency","chainId","decimals","symbol","Number","isSafeInteger","invariant","isInteger","Token","address","projectLink","equals","other","isToken","sortsBefore","toLowerCase","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","getAddress","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","numerator","denominator","add","outputAmount","CurrencyAmount","fromRawAmount","divide","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","toString","rootK","rootKLast","feeLiquidity","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","EXACT_INPUT","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","validateAndParseAddress","checksummedAddress","warning","parseBigintIsh","bigintIsh","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","otherParsed","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","_100_PERCENT","Percent","decimalScale","exponentiate","rawAmount","added","subtracted","multiplied","divided","toExact","baseCurrency","quoteCurrency","args","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","value","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":";;;;;;;;;;;;;;;;;;;IAKYA;;AAAZ,WAAYA;AACVA,EAAAA,+BAAA,YAAA;AACAA,EAAAA,8BAAA,WAAA;AACAA,EAAAA,sCAAA,YAAA;AACAA,EAAAA,+BAAA,SAAA;AACD,CALD,EAAYA,OAAO,KAAPA,OAAO,KAAA,CAAnB;;IAOYC;;AAAZ,WAAYA;AACVA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,SAAS,KAATA,SAAS,KAAA,CAArB;;IAKYC;;AAAZ,WAAYA;AACVA,EAAAA,oCAAA,eAAA;AACAA,EAAAA,uCAAA,kBAAA;AACAA,EAAAA,kCAAA,aAAA;AACD,CAJD,EAAYA,QAAQ,KAARA,QAAQ,KAAA,CAApB;;IAMaC,mBAAmB,oDAC7BH,OAAO,CAACI,OADqB,IACX,4CADW,uBAE7BJ,OAAO,CAACK,MAFqB,IAEZ,4CAFY,uBAG7BL,OAAO,CAACM,OAHqB,IAGX,4CAHW,uBAI7BN,OAAO,CAACO,IAJqB,IAId,4CAJc;IAOnBC,kBAAkB,kDAC5BR,OAAO,CAACI,OADoB,IACV,oEADU,sBAE5BJ,OAAO,CAACK,MAFoB,IAEX,oEAFW,sBAG5BL,OAAO,CAACM,OAHoB,IAGV,oEAHU,sBAI5BN,OAAO,CAACO,IAJoB,IAIb,oEAJa;IAOlBE,iBAAiB,gBAAGC,IAAI,CAACC,MAAL,CAAY,IAAZ;;AAG1B,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AAGA,IAAMG,IAAI,gBAAGJ,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AAEA,IAAMI,IAAI,gBAAGL,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMM,KAAK,gBAAGP,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AAEP,IAAYO,YAAZ;;AAAA,WAAYA;AACVA,EAAAA,qBAAA,UAAA;AACAA,EAAAA,uBAAA,YAAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;;AAKO,IAAMC,oBAAoB,sDAC9BD,YAAY,CAACE,KADiB,iBACTV,IAAI,CAACC,MAAL,CAAY,MAAZ,CADS,wBAE9BO,YAAY,CAACG,OAFiB,iBAEPX,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAFO,wBAA1B;AAKA,IAAMW,UAAU,gBAAGZ,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DP;AACA,IAAMY,iBAAiB,IAAG,oBAAoBC,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAaC,yBAAb;AAAA;;AAGE;;;AACE;AAHc,qCAAA,GAAoC,IAApC;AAId,UAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,gCAA4B,wEAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAA+CC,KAA/C;AAUA;;;;;AAIA,IAAaC,4BAAb;AAAA;;AAGE;;;AACE;AAHc,yCAAA,GAAuC,IAAvC;AAId,WAAKL,IAAL,GAAY,OAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,iCAA4B,2EAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAAkDC,KAAlD;;ACjBA;;;;AAGA,IAAsBE,YAAtB;AA+BE;;;;;;;AAOA,sBAAsBC,OAAtB,EAAuCC,QAAvC,EAAyDC,MAAzD,EAAyET,IAAzE;AACE,GAAUU,MAAM,CAACC,aAAP,CAAqBJ,OAArB,CAAV,2CAAAK,SAAS,QAAgC,UAAhC,CAAT,GAAAA,SAAS,OAAT;AACA,IAAUJ,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,GAA5B,IAAmCE,MAAM,CAACG,SAAP,CAAiBL,QAAjB,CAA7C,4CAAAI,SAAS,QAAgE,UAAhE,CAAT,GAAAA,SAAS,OAAT;AAEA,OAAKL,OAAL,GAAeA,OAAf;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKT,IAAL,GAAYA,IAAZ;AACD,CA9CH;;ACMA;;;;AAGA,IAAac,KAAb;AAAA;;AAYE,iBACIP,OADJ,EAEIQ,OAFJ,EAGIP,QAHJ,EAIIC,MAJJ,EAKIT,IALJ,EAMIgB,WANJ;;;AAQE,qCAAMT,OAAN,EAAeC,QAAf,EAAyBC,MAAzB,EAAiCT,IAAjC;AAnBc,kBAAA,GAAkB,KAAlB;AAEA,iBAAA,GAAgB,IAAhB;AAkBd,UAAKe,OAAL,GAAeA,OAAf;AACA,UAAKC,WAAL,GAAmBA,WAAnB;;AACD;AAED;;;;;;AAzBF;;AAAA,SA6BSC,MA7BT,GA6BS,gBAAOC,KAAP;AACL,WAAOA,KAAK,CAACC,OAAN,IAAiB,KAAKZ,OAAL,KAAiBW,KAAK,CAACX,OAAxC,IAAmD,KAAKQ,OAAL,KAAiBG,KAAK,CAACH,OAAjF;AACD;AAED;;;;;;AAjCF;;AAAA,SAuCSK,WAvCT,GAuCS,qBAAYF,KAAZ;AACL,MAAU,KAAKX,OAAL,KAAiBW,KAAK,CAACX,OAAjC,4CAAAK,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU,KAAKG,OAAL,KAAiBG,KAAK,CAACH,OAAjC,4CAAAH,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,KAAKG,OAAL,CAAaM,WAAb,KAA6BH,KAAK,CAACH,OAAN,CAAcM,WAAd,EAApC;AACD;AAED;;;AA7CF;;AAAA;AAAA;AAAA;AAiDI,aAAO,IAAP;AACD;AAlDH;AAAA;AAAA;AAqDI,aAAO;AACLN,QAAAA,OAAO,EAAE,KAAKA,OADT;AAELR,QAAAA,OAAO,EAAE,KAAKA,OAFT;AAGLC,QAAAA,QAAQ,EAAE,KAAKA,QAHV;AAILC,QAAAA,MAAM,EAAE,KAAKA,MAJR;AAKLT,QAAAA,IAAI,EAAE,KAAKA,IALN;AAMLgB,QAAAA,WAAW,EAAE,KAAKA;AANb,OAAP;AAQD;AA7DH;;AAAA;AAAA,EAA2BV,YAA3B;;ICLagB,kBAAkB,GAAG,SAArBA,kBAAqB;MACKC,sBAAAA;MACAC,cAAAA;MACAC,cAAAA;;cAMVD,MAAM,CAACJ,WAAP,CAAmBK,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT;MAAlEE;MAAQC;;;AACf,SAAOC,iBAAiB,CACpBL,cADoB,EAEpBM,SAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,IAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACJ,MAAM,CAACX,OAAR,EAAiBY,MAAM,CAACZ,OAAxB,CAAzB,CAAL,CAAZ,CAFW,EAGpBjC,kBAAkB,CAAC4C,MAAM,CAACnB,OAAR,CAHE,CAAxB;AAKH,CAfM;AAgBP,IAAawB,IAAb;AAQI,gBAAmBC,eAAnB,EAA2DC,YAA3D;AACI,QAAMC,YAAY,GAAGF,eAAe,CAACG,QAAhB,CAAyBf,WAAzB,CAAqCa,YAAY,CAACE,QAAlD;AAAA,MACf,CAACH,eAAD,EAAkBC,YAAlB,CADe,GAEf,CAACA,YAAD,EAAeD,eAAf,CAFN;AAGA,SAAKI,cAAL,GAAsB,IAAItB,OAAJ,CAClBoB,YAAY,CAAC,CAAD,CAAZ,CAAgBC,QAAhB,CAAyB5B,OADP,EAElBwB,IAAI,CAACM,UAAL,CAAgBH,YAAY,CAAC,CAAD,CAAZ,CAAgBC,QAAhC,EAA0CD,YAAY,CAAC,CAAD,CAAZ,CAAgBC,QAA1D,CAFkB,EAGlB,EAHkB,EAIlB,QAJkB,EAKlB,YALkB,CAAtB;AAOA,SAAKD,YAAL,GAAoBA,YAApB;AACH;;AApBL,OAIkBG,UAJlB,GAIW,oBAAkBb,MAAlB,EAAiCC,MAAjC;AACH,WAAOH,kBAAkB,CAAC;AAAEC,MAAAA,cAAc,EAAE9C,mBAAmB,CAAC+C,MAAM,CAACjB,OAAR,CAArC;AAAuDiB,MAAAA,MAAM,EAANA,MAAvD;AAA+DC,MAAAA,MAAM,EAANA;AAA/D,KAAD,CAAzB;AACH;AAgBD;;;;AAtBJ;;AAAA;;AAAA,SA0BWa,aA1BX,GA0BW,uBAAcC,KAAd;AACH,WAAOA,KAAK,CAACtB,MAAN,CAAa,KAAKS,MAAlB,KAA6Ba,KAAK,CAACtB,MAAN,CAAa,KAAKU,MAAlB,CAApC;AACH;AAED;;;AA9BJ;;AA8CI;;;;AA9CJ,SAkDWa,OAlDX,GAkDW,iBAAQD,KAAR;AACH,KAAU,KAAKD,aAAL,CAAmBC,KAAnB,CAAV,2CAAA3B,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO2B,KAAK,CAACtB,MAAN,CAAa,KAAKS,MAAlB,IAA4B,KAAKe,WAAjC,GAA+C,KAAKC,WAA3D;AACH;AAED;;;AAvDJ;;AAAA,SA8EWC,SA9EX,GA8EW,mBAAUJ,KAAV;AACH,KAAU,KAAKD,aAAL,CAAmBC,KAAnB,CAAV,2CAAA3B,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO2B,KAAK,CAACtB,MAAN,CAAa,KAAKS,MAAlB,IAA4B,KAAKkB,QAAjC,GAA4C,KAAKC,QAAxD;AACH,GAjFL;;AAAA,SAmFWC,eAnFX,GAmFW,yBAAgBC,WAAhB;AACH,KAAU,KAAKT,aAAL,CAAmBS,WAAW,CAACZ,QAA/B,CAAV,2CAAAvB,SAAS,QAA2C,OAA3C,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAI5B,IAAI,CAACgE,KAAL,CAAW,KAAKJ,QAAL,CAAcK,QAAzB,EAAmC/D,IAAnC,KAA4CF,IAAI,CAACgE,KAAL,CAAW,KAAKH,QAAL,CAAcI,QAAzB,EAAmC/D,IAAnC,CAAhD,EAA0F;AACtF,YAAM,IAAIa,yBAAJ,EAAN;AACH;;AACD,QAAMmD,YAAY,GAAG,KAAKP,SAAL,CAAeI,WAAW,CAACZ,QAA3B,CAArB;AACA,QAAMgB,aAAa,GAAG,KAAKR,SAAL,CAAeI,WAAW,CAACZ,QAAZ,CAAqBlB,MAArB,CAA4B,KAAKS,MAAjC,IAA2C,KAAKC,MAAhD,GAAyD,KAAKD,MAA7E,CAAtB;AACA,QAAM0B,kBAAkB,GAAGpE,IAAI,CAACqE,QAAL,CAAcN,WAAW,CAACE,QAA1B,EAAoC3D,IAApC,CAA3B;AACA,QAAMgE,SAAS,GAAGtE,IAAI,CAACqE,QAAL,CAAcD,kBAAd,EAAkCD,aAAa,CAACF,QAAhD,CAAlB;AACA,QAAMM,WAAW,GAAGvE,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACqE,QAAL,CAAcH,YAAY,CAACD,QAA3B,EAAqC1D,KAArC,CAAT,EAAsD6D,kBAAtD,CAApB;AACA,QAAMK,YAAY,GAAGC,gBAAc,CAACC,aAAf,CACjBZ,WAAW,CAACZ,QAAZ,CAAqBlB,MAArB,CAA4B,KAAKS,MAAjC,IAA2C,KAAKC,MAAhD,GAAyD,KAAKD,MAD7C,EAEjB1C,IAAI,CAAC4E,MAAL,CAAYN,SAAZ,EAAuBC,WAAvB,CAFiB,CAArB;;AAIA,QAAIvE,IAAI,CAACgE,KAAL,CAAWS,YAAY,CAACR,QAAxB,EAAkC/D,IAAlC,CAAJ,EAA6C;AACzC,YAAM,IAAImB,4BAAJ,EAAN;AACH;;AACD,WAAO,CAACoD,YAAD,EAAe,IAAI1B,IAAJ,CAASmB,YAAY,CAACM,GAAb,CAAiBT,WAAjB,CAAT,EAAwCI,aAAa,CAACU,QAAd,CAAuBJ,YAAvB,CAAxC,CAAf,CAAP;AACH,GArGL;;AAAA,SAuGWK,cAvGX,GAuGW,wBAAeL,YAAf;AACH,KAAU,KAAKnB,aAAL,CAAmBmB,YAAY,CAACtB,QAAhC,CAAV,2CAAAvB,SAAS,QAA4C,OAA5C,CAAT,GAAAA,SAAS,OAAT;;AACA,QACI5B,IAAI,CAACgE,KAAL,CAAW,KAAKJ,QAAL,CAAcK,QAAzB,EAAmC/D,IAAnC,KACAF,IAAI,CAACgE,KAAL,CAAW,KAAKH,QAAL,CAAcI,QAAzB,EAAmC/D,IAAnC,CADA,IAEAF,IAAI,CAAC+E,kBAAL,CAAwBN,YAAY,CAACR,QAArC,EAA+C,KAAKN,SAAL,CAAec,YAAY,CAACtB,QAA5B,EAAsCc,QAArF,CAHJ,EAIE;AACE,YAAM,IAAIlD,yBAAJ,EAAN;AACH;;AAED,QAAMoD,aAAa,GAAG,KAAKR,SAAL,CAAec,YAAY,CAACtB,QAA5B,CAAtB;AACA,QAAMe,YAAY,GAAG,KAAKP,SAAL,CAAec,YAAY,CAACtB,QAAb,CAAsBlB,MAAtB,CAA6B,KAAKS,MAAlC,IAA4C,KAAKC,MAAjD,GAA0D,KAAKD,MAA9E,CAArB;AACA,QAAM4B,SAAS,GAAGtE,IAAI,CAACqE,QAAL,CAAcrE,IAAI,CAACqE,QAAL,CAAcH,YAAY,CAACD,QAA3B,EAAqCQ,YAAY,CAACR,QAAlD,CAAd,EAA2E1D,KAA3E,CAAlB;AACA,QAAMgE,WAAW,GAAGvE,IAAI,CAACqE,QAAL,CAAcrE,IAAI,CAAC6E,QAAL,CAAcV,aAAa,CAACF,QAA5B,EAAsCQ,YAAY,CAACR,QAAnD,CAAd,EAA4E3D,IAA5E,CAApB;AACA,QAAMyD,WAAW,GAAGW,gBAAc,CAACC,aAAf,CAChBF,YAAY,CAACtB,QAAb,CAAsBlB,MAAtB,CAA6B,KAAKS,MAAlC,IAA4C,KAAKC,MAAjD,GAA0D,KAAKD,MAD/C,EAEhB1C,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAAC4E,MAAL,CAAYN,SAAZ,EAAuBC,WAAvB,CAAT,EAA8CpE,GAA9C,CAFgB,CAApB;AAIA,WAAO,CAAC4D,WAAD,EAAc,IAAIhB,IAAJ,CAASmB,YAAY,CAACM,GAAb,CAAiBT,WAAjB,CAAT,EAAwCI,aAAa,CAACU,QAAd,CAAuBJ,YAAvB,CAAxC,CAAd,CAAP;AACH,GA1HL;;AAAA,SA4HWO,kBA5HX,GA4HW,4BACHC,WADG,EAEHC,YAFG,EAGHjC,YAHG;AAKH,KAAUgC,WAAW,CAAC9B,QAAZ,CAAqBlB,MAArB,CAA4B,KAAKmB,cAAjC,CAAV,2CAAAxB,SAAS,QAAmD,WAAnD,CAAT,GAAAA,SAAS,OAAT;AACA,QAAMsB,YAAY,GAAGgC,YAAY,CAAC/B,QAAb,CAAsBf,WAAtB,CAAkCa,YAAY,CAACE,QAA/C;AAAA,MACf,CAAC+B,YAAD,EAAejC,YAAf,CADe,GAEf,CAACA,YAAD,EAAeiC,YAAf,CAFN;AAGA,MAAUhC,YAAY,CAAC,CAAD,CAAZ,CAAgBC,QAAhB,CAAyBlB,MAAzB,CAAgC,KAAKS,MAArC,KAAgDQ,YAAY,CAAC,CAAD,CAAZ,CAAgBC,QAAhB,CAAyBlB,MAAzB,CAAgC,KAAKU,MAArC,CAA1D,4CAAAf,SAAS,QAA+F,OAA/F,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAIuD,SAAJ;;AACA,QAAInF,IAAI,CAACgE,KAAL,CAAWiB,WAAW,CAAChB,QAAvB,EAAiC/D,IAAjC,CAAJ,EAA4C;AACxCiF,MAAAA,SAAS,GAAGnF,IAAI,CAAC6E,QAAL,CACRO,IAAI,CAACpF,IAAI,CAACqE,QAAL,CAAcnB,YAAY,CAAC,CAAD,CAAZ,CAAgBe,QAA9B,EAAwCf,YAAY,CAAC,CAAD,CAAZ,CAAgBe,QAAxD,CAAD,CADI,EAERlE,iBAFQ,CAAZ;AAIH,KALD,MAKO;AACH,UAAMsF,OAAO,GAAGrF,IAAI,CAAC4E,MAAL,CAAY5E,IAAI,CAACqE,QAAL,CAAcnB,YAAY,CAAC,CAAD,CAAZ,CAAgBe,QAA9B,EAAwCgB,WAAW,CAAChB,QAApD,CAAZ,EAA2E,KAAKL,QAAL,CAAcK,QAAzF,CAAhB;AACA,UAAMqB,OAAO,GAAGtF,IAAI,CAAC4E,MAAL,CAAY5E,IAAI,CAACqE,QAAL,CAAcnB,YAAY,CAAC,CAAD,CAAZ,CAAgBe,QAA9B,EAAwCgB,WAAW,CAAChB,QAApD,CAAZ,EAA2E,KAAKJ,QAAL,CAAcI,QAAzF,CAAhB;AACAkB,MAAAA,SAAS,GAAGnF,IAAI,CAACuF,eAAL,CAAqBF,OAArB,EAA8BC,OAA9B,IAAyCD,OAAzC,GAAmDC,OAA/D;AACH;;AACD,QAAI,CAACtF,IAAI,CAACwF,WAAL,CAAiBL,SAAjB,EAA4BjF,IAA5B,CAAL,EAAwC;AACpC,YAAM,IAAImB,4BAAJ,EAAN;AACH;;AACD,WAAOqD,gBAAc,CAACC,aAAf,CAA6B,KAAKvB,cAAlC,EAAkD+B,SAAlD,CAAP;AACH,GAtJL;;AAAA,SAwJWM,iBAxJX,GAwJW,2BACHlC,KADG,EAEH0B,WAFG,EAGHE,SAHG,EAIHO,KAJG,EAKHC,KALG;QAIHD;AAAAA,MAAAA,QAAiB;;;AAGjB,KAAU,KAAKpC,aAAL,CAAmBC,KAAnB,CAAV,2CAAA3B,SAAS,QAA4B,OAA5B,CAAT,GAAAA,SAAS,OAAT;AACA,KAAUqD,WAAW,CAAC9B,QAAZ,CAAqBlB,MAArB,CAA4B,KAAKmB,cAAjC,CAAV,2CAAAxB,SAAS,QAAmD,cAAnD,CAAT,GAAAA,SAAS,OAAT;AACA,KAAUuD,SAAS,CAAChC,QAAV,CAAmBlB,MAAnB,CAA0B,KAAKmB,cAA/B,CAAV,2CAAAxB,SAAS,QAAiD,WAAjD,CAAT,GAAAA,SAAS,OAAT;AACA,KAAU5B,IAAI,CAACuF,eAAL,CAAqBJ,SAAS,CAAClB,QAA/B,EAAyCgB,WAAW,CAAChB,QAArD,CAAV,2CAAArC,SAAS,QAAiE,WAAjE,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAIgE,mBAAJ;;AACA,QAAI,CAACF,KAAL,EAAY;AACRE,MAAAA,mBAAmB,GAAGX,WAAtB;AACH,KAFD,MAEO;AACH,OAAU,CAAC,CAACU,KAAZ,2CAAA/D,SAAS,QAAU,QAAV,CAAT,GAAAA,SAAS,OAAT;AACA,UAAMiE,WAAW,GAAG7F,IAAI,CAACC,MAAL,CAAY0F,KAAK,CAACG,QAAN,EAAZ,CAApB;;AACA,UAAI,CAAC9F,IAAI,CAACgE,KAAL,CAAW6B,WAAX,EAAwB3F,IAAxB,CAAL,EAAoC;AAChC,YAAM6F,KAAK,GAAGX,IAAI,CAACpF,IAAI,CAACqE,QAAL,CAAc,KAAKT,QAAL,CAAcK,QAA5B,EAAsC,KAAKJ,QAAL,CAAcI,QAApD,CAAD,CAAlB;AACA,YAAM+B,SAAS,GAAGZ,IAAI,CAACS,WAAD,CAAtB;;AACA,YAAI7F,IAAI,CAACwF,WAAL,CAAiBO,KAAjB,EAAwBC,SAAxB,CAAJ,EAAwC;AACpC,cAAM1B,SAAS,GAAGtE,IAAI,CAACqE,QAAL,CAAcY,WAAW,CAAChB,QAA1B,EAAoCjE,IAAI,CAAC6E,QAAL,CAAckB,KAAd,EAAqBC,SAArB,CAApC,CAAlB;AACA,cAAMzB,WAAW,GAAGvE,IAAI,CAACwE,GAAL,CAASxE,IAAI,CAACqE,QAAL,CAAc0B,KAAd,EAAqB3F,IAArB,CAAT,EAAqC4F,SAArC,CAApB;AACA,cAAMC,YAAY,GAAGjG,IAAI,CAAC4E,MAAL,CAAYN,SAAZ,EAAuBC,WAAvB,CAArB;AACAqB,UAAAA,mBAAmB,GAAGX,WAAW,CAACT,GAAZ,CAAgBE,gBAAc,CAACC,aAAf,CAA6B,KAAKvB,cAAlC,EAAkD6C,YAAlD,CAAhB,CAAtB;AACH,SALD,MAKO;AACHL,UAAAA,mBAAmB,GAAGX,WAAtB;AACH;AACJ,OAXD,MAWO;AACHW,QAAAA,mBAAmB,GAAGX,WAAtB;AACH;AACJ;;AAED,WAAOP,gBAAc,CAACC,aAAf,CACHpB,KADG,EAEHvD,IAAI,CAAC4E,MAAL,CAAY5E,IAAI,CAACqE,QAAL,CAAcc,SAAS,CAAClB,QAAxB,EAAkC,KAAKN,SAAL,CAAeJ,KAAf,EAAsBU,QAAxD,CAAZ,EAA+E2B,mBAAmB,CAAC3B,QAAnG,CAFG,CAAP;AAIH,GA9LL;;AAAA;AAAA;AAAA;AAkCQ,UAAMiC,MAAM,GAAG,KAAKhD,YAAL,CAAkB,CAAlB,EAAqB0B,MAArB,CAA4B,KAAK1B,YAAL,CAAkB,CAAlB,CAA5B,CAAf;AACA,aAAO,IAAIiD,OAAJ,CAAU,KAAKzD,MAAf,EAAuB,KAAKC,MAA5B,EAAoCuD,MAAM,CAAC3B,WAA3C,EAAwD2B,MAAM,CAAC5B,SAA/D,CAAP;AACH;AAED;;;;AAtCJ;AAAA;AAAA;AA0CQ,UAAM4B,MAAM,GAAG,KAAKhD,YAAL,CAAkB,CAAlB,EAAqB0B,MAArB,CAA4B,KAAK1B,YAAL,CAAkB,CAAlB,CAA5B,CAAf;AACA,aAAO,IAAIiD,OAAJ,CAAU,KAAKxD,MAAf,EAAuB,KAAKD,MAA5B,EAAoCwD,MAAM,CAAC3B,WAA3C,EAAwD2B,MAAM,CAAC5B,SAA/D,CAAP;AACH;AA5CL;AAAA;AAAA;AA2DQ,aAAO,KAAK5B,MAAL,CAAYnB,OAAnB;AACH;AA5DL;AAAA;AAAA;AA+DQ,aAAO,KAAK2B,YAAL,CAAkB,CAAlB,EAAqBC,QAA5B;AACH;AAhEL;AAAA;AAAA;AAmEQ,aAAO,KAAKD,YAAL,CAAkB,CAAlB,EAAqBC,QAA5B;AACH;AApEL;AAAA;AAAA;AAuEQ,aAAO,KAAKD,YAAL,CAAkB,CAAlB,CAAP;AACH;AAxEL;AAAA;AAAA;AA2EQ,aAAO,KAAKA,YAAL,CAAkB,CAAlB,CAAP;AACH;AA5EL;;AAAA;AAAA;;ICpBakD,KAAb;AAME,iBAAmBC,KAAnB,EAAkCC,KAAlC,EAAiDC,MAAjD;AA0BQ,kBAAA,GAA2C,IAA3C;AAzBN,MAAUF,KAAK,CAACG,MAAN,GAAe,CAAzB,4CAAA5E,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;AACA,QAAML,OAAO,GAAW8E,KAAK,CAAC,CAAD,CAAL,CAAS9E,OAAjC;AACA,KACI8E,KAAK,CAACI,KAAN,CAAY,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACnF,OAAL,KAAiBA,OAA3B;AAAA,KAAZ,CADJ,2CAAAK,SAAS,QAEL,WAFK,CAAT,GAAAA,SAAS,OAAT;AAKA,QAAM+E,YAAY,GAAGL,KAAK,CAACM,OAA3B;AACA,KAAUP,KAAK,CAAC,CAAD,CAAL,CAAS/C,aAAT,CAAuBqD,YAAvB,CAAV,2CAAA/E,SAAS,QAAuC,OAAvC,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU,OAAO2E,MAAP,KAAkB,WAAlB,IAAiCF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAL,CAAwBlD,aAAxB,CAAsCiD,MAAM,CAACK,OAA7C,CAA3C,4CAAAhF,SAAS,QAAyF,QAAzF,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAMiF,IAAI,GAAY,CAACF,YAAD,CAAtB;;AACA,yDAAwBN,KAAK,CAACS,OAAN,EAAxB,wCAAyC;AAAA;AAAA,UAA7BC,CAA6B;AAAA,UAA1BL,IAA0B;AACvC,UAAMM,YAAY,GAAGH,IAAI,CAACE,CAAD,CAAzB;AACA,QAAUC,YAAY,CAAC/E,MAAb,CAAoByE,IAAI,CAAChE,MAAzB,KAAoCsE,YAAY,CAAC/E,MAAb,CAAoByE,IAAI,CAAC/D,MAAzB,CAA9C,4CAAAf,SAAS,QAAuE,MAAvE,CAAT,GAAAA,SAAS,OAAT;;AACA,UAAM2E,OAAM,GAAGS,YAAY,CAAC/E,MAAb,CAAoByE,IAAI,CAAChE,MAAzB,IAAmCgE,IAAI,CAAC/D,MAAxC,GAAiD+D,IAAI,CAAChE,MAArE;;AACAmE,MAAAA,IAAI,CAACI,IAAL,CAAUV,OAAV;AACD;;AAED,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKQ,IAAL,GAAYA,IAAZ;AACA,SAAKP,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AA9BH;AAAA;AAAA;AAmCI,UAAI,KAAKW,SAAL,KAAmB,IAAvB,EAA6B,OAAO,KAAKA,SAAZ;AAC7B,UAAMC,MAAM,GAAgC,EAA5C;;AACA,4DAAwB,KAAKd,KAAL,CAAWS,OAAX,EAAxB,2CAA8C;AAAA;AAAA,YAAlCC,CAAkC;AAAA,YAA/BL,IAA+B;AAC5CS,QAAAA,MAAM,CAACF,IAAP,CACI,KAAKJ,IAAL,CAAUE,CAAV,EAAa9E,MAAb,CAAoByE,IAAI,CAAChE,MAAzB,IACM,IAAIyD,OAAJ,CAAUO,IAAI,CAAC9C,QAAL,CAAcT,QAAxB,EAAkCuD,IAAI,CAAC7C,QAAL,CAAcV,QAAhD,EAA0DuD,IAAI,CAAC9C,QAAL,CAAcK,QAAxE,EAAkFyC,IAAI,CAAC7C,QAAL,CAAcI,QAAhG,CADN,GAEM,IAAIkC,OAAJ,CAAUO,IAAI,CAAC7C,QAAL,CAAcV,QAAxB,EAAkCuD,IAAI,CAAC9C,QAAL,CAAcT,QAAhD,EAA0DuD,IAAI,CAAC7C,QAAL,CAAcI,QAAxE,EAAkFyC,IAAI,CAAC9C,QAAL,CAAcK,QAAhG,CAHV;AAKD;;AACD,UAAMmD,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd;AAAA,eAA+BD,WAAW,CAAClD,QAAZ,CAAqBmD,YAArB,CAA/B;AAAA,OAAvB,EAA0FL,MAAM,CAAC,CAAD,CAAhG,CAAhB;AACA,aAAQ,KAAKD,SAAL,GAAiB,IAAIf,OAAJ,CAAU,KAAKG,KAAf,EAAsB,KAAKC,MAA3B,EAAmCa,OAAO,CAAC7C,WAA3C,EAAwD6C,OAAO,CAAC9C,SAAhE,CAAzB;AACD;AA9CH;AAAA;AAAA;AAiDI,aAAO,KAAK+B,KAAL,CAAW,CAAX,EAAc9E,OAArB;AACD;AAlDH;;AAAA;AAAA;;ACWA;;AACA,SAAgBkG,sBACZC,GACAC;AAEF;AACA,GAAUD,CAAC,CAAC3D,WAAF,CAAcZ,QAAd,CAAuBlB,MAAvB,CAA8B0F,CAAC,CAAC5D,WAAF,CAAcZ,QAA5C,CAAV,2CAAAvB,SAAS,QAAwD,gBAAxD,CAAT,GAAAA,SAAS,OAAT;AACA,GAAU8F,CAAC,CAACjD,YAAF,CAAetB,QAAf,CAAwBlB,MAAxB,CAA+B0F,CAAC,CAAClD,YAAF,CAAetB,QAA9C,CAAV,2CAAAvB,SAAS,QAA0D,iBAA1D,CAAT,GAAAA,SAAS,OAAT;;AACA,MAAI8F,CAAC,CAACjD,YAAF,CAAemD,OAAf,CAAuBD,CAAC,CAAClD,YAAzB,CAAJ,EAA4C;AAC1C,QAAIiD,CAAC,CAAC3D,WAAF,CAAc6D,OAAd,CAAsBD,CAAC,CAAC5D,WAAxB,CAAJ,EAA0C;AACxC,aAAO,CAAP;AACD,KAHyC;;;AAK1C,QAAI2D,CAAC,CAAC3D,WAAF,CAAc8D,QAAd,CAAuBF,CAAC,CAAC5D,WAAzB,CAAJ,EAA2C;AACzC,aAAO,CAAC,CAAR;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAVD,MAUO;AACL;AACA,QAAI2D,CAAC,CAACjD,YAAF,CAAeoD,QAAf,CAAwBF,CAAC,CAAClD,YAA1B,CAAJ,EAA6C;AAC3C,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF;AACF;;AAGD,SAAgBqD,gBACZJ,GACAC;AAEF,MAAMI,MAAM,GAAGN,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;;AACA,MAAII,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOA,MAAP;AACD;;;AAGD,MAAIL,CAAC,CAACM,WAAF,CAAcH,QAAd,CAAuBF,CAAC,CAACK,WAAzB,CAAJ,EAA2C;AACzC,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIN,CAAC,CAACM,WAAF,CAAcxC,WAAd,CAA0BmC,CAAC,CAACK,WAA5B,CAAJ,EAA8C;AACnD,WAAO,CAAP;AACD;;;AAGD,SAAON,CAAC,CAACO,KAAF,CAAQpB,IAAR,CAAaL,MAAb,GAAsBmB,CAAC,CAACM,KAAF,CAAQpB,IAAR,CAAaL,MAA1C;AACD;AASD;;;;;AAIA,IAAa0B,KAAb;AAkDE,iBACID,KADJ,EAEIE,MAFJ,EAGIC,SAHJ;AAKE,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKG,SAAL,GAAiBA,SAAjB;AAEA,QAAMlF,YAAY,GAA4B,IAAImF,KAAJ,CAAUJ,KAAK,CAACpB,IAAN,CAAWL,MAArB,CAA9C;;AACA,QAAI4B,SAAS,KAAK7I,SAAS,CAAC+I,WAA5B,EAAyC;AACvC,OAAUH,MAAM,CAAChF,QAAP,CAAgBlB,MAAhB,CAAuBgG,KAAK,CAAC3B,KAA7B,CAAV,2CAAA1E,SAAS,QAAsC,OAAtC,CAAT,GAAAA,SAAS,OAAT;AACAsB,MAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBiF,MAAM,CAACvB,OAAzB;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,KAAK,CAACpB,IAAN,CAAWL,MAAX,GAAoB,CAAxC,EAA2CO,CAAC,EAA5C,EAAgD;AAC9C,YAAML,IAAI,GAAGuB,KAAK,CAAC5B,KAAN,CAAYU,CAAZ,CAAb;;AAD8C,oCAEvBL,IAAI,CAAC5C,eAAL,CAAqBZ,YAAY,CAAC6D,CAAD,CAAjC,CAFuB;AAAA,YAEvCtC,YAFuC;;AAG9CvB,QAAAA,YAAY,CAAC6D,CAAC,GAAG,CAAL,CAAZ,GAAsBtC,YAAtB;AACD;;AACD,WAAKV,WAAL,GAAmBW,gBAAc,CAAC6D,oBAAf,CAAoCN,KAAK,CAAC3B,KAA1C,EAAiD6B,MAAM,CAAC7D,SAAxD,EAAmE6D,MAAM,CAAC5D,WAA1E,CAAnB;AACA,WAAKE,YAAL,GAAoBC,gBAAc,CAAC6D,oBAAf,CAChBN,KAAK,CAAC1B,MADU,EAEhBrD,YAAY,CAACA,YAAY,CAACsD,MAAb,GAAsB,CAAvB,CAAZ,CAAsClC,SAFtB,EAGhBpB,YAAY,CAACA,YAAY,CAACsD,MAAb,GAAsB,CAAvB,CAAZ,CAAsCjC,WAHtB,CAApB;AAKD,KAdD,MAcO;AACL,OAAU4D,MAAM,CAAChF,QAAP,CAAgBlB,MAAhB,CAAuBgG,KAAK,CAAC1B,MAA7B,CAAV,2CAAA3E,SAAS,QAAuC,QAAvC,CAAT,GAAAA,SAAS,OAAT;AACAsB,MAAAA,YAAY,CAACA,YAAY,CAACsD,MAAb,GAAsB,CAAvB,CAAZ,GAAwC2B,MAAM,CAACvB,OAA/C;;AACA,WAAK,IAAIG,EAAC,GAAGkB,KAAK,CAACpB,IAAN,CAAWL,MAAX,GAAoB,CAAjC,EAAoCO,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;AAC9C,YAAML,KAAI,GAAGuB,KAAK,CAAC5B,KAAN,CAAYU,EAAC,GAAG,CAAhB,CAAb;;AAD8C,mCAExBL,KAAI,CAAC5B,cAAL,CAAoB5B,YAAY,CAAC6D,EAAD,CAAhC,CAFwB;AAAA,YAEvChD,WAFuC;;AAG9Cb,QAAAA,YAAY,CAAC6D,EAAC,GAAG,CAAL,CAAZ,GAAsBhD,WAAtB;AACD;;AACD,WAAKA,WAAL,GAAmBW,gBAAc,CAAC6D,oBAAf,CACfN,KAAK,CAAC3B,KADS,EAEfpD,YAAY,CAAC,CAAD,CAAZ,CAAgBoB,SAFD,EAGfpB,YAAY,CAAC,CAAD,CAAZ,CAAgBqB,WAHD,CAAnB;AAKA,WAAKE,YAAL,GAAoBC,gBAAc,CAAC6D,oBAAf,CAAoCN,KAAK,CAAC1B,MAA1C,EAAkD4B,MAAM,CAAC7D,SAAzD,EAAoE6D,MAAM,CAAC5D,WAA3E,CAApB;AACD;;AACD,SAAKiE,cAAL,GAAsB,IAAIrC,OAAJ,CAClB,KAAKpC,WAAL,CAAiBZ,QADC,EAElB,KAAKsB,YAAL,CAAkBtB,QAFA,EAGlB,KAAKY,WAAL,CAAiBE,QAHC,EAIlB,KAAKQ,YAAL,CAAkBR,QAJA,CAAtB;AAMA,SAAK+D,WAAL,GAAmBS,kBAAkB,CAACR,KAAK,CAACS,QAAP,EAAiB,KAAK3E,WAAtB,EAAmC,KAAKU,YAAxC,CAArC;AACD;AArED;;;;;;;AA1BF,QA+BgBkE,OA/BhB,GA+BS,iBACHV,KADG,EAEHW,QAFG;AAIL,WAAO,IAAIV,KAAJ,CAAUD,KAAV,EAAiBW,QAAjB,EAA2BrJ,SAAS,CAAC+I,WAArC,CAAP;AACD;AAED;;;;;AAtCF;;AAAA,QA2CgBO,QA3ChB,GA2CS,kBACHZ,KADG,EAEHa,SAFG;AAIL,WAAO,IAAIZ,KAAJ,CAAUD,KAAV,EAAiBa,SAAjB,EAA4BvJ,SAAS,CAACwJ,YAAtC,CAAP;AACD;AAiDD;;;;AAjGF;;AAAA;;AAAA,SAqGSC,gBArGT,GAqGS,0BAAiBC,iBAAjB;AACL,KAAU,CAACA,iBAAiB,CAACpB,QAAlB,CAA2B3H,IAA3B,CAAX,2CAAA0B,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAI,KAAKwG,SAAL,KAAmB7I,SAAS,CAACwJ,YAAjC,EAA+C;AAC7C,aAAO,KAAKtE,YAAZ;AACD,KAFD,MAEO;AACL,UAAMyE,yBAAyB,GAAG,IAAIC,UAAJ,CAAahJ,GAAb,EAC7BqE,GAD6B,CACzByE,iBADyB,EAE7BG,MAF6B,GAG7B/E,QAH6B,CAGpB,KAAKI,YAAL,CAAkBR,QAHE,EAGQA,QAH1C;AAIA,aAAOS,gBAAc,CAACC,aAAf,CAA6B,KAAKF,YAAL,CAAkBtB,QAA/C,EAAyD+F,yBAAzD,CAAP;AACD;AACF;AAED;;;;AAlHF;;AAAA,SAsHSG,eAtHT,GAsHS,yBAAgBJ,iBAAhB;AACL,KAAU,CAACA,iBAAiB,CAACpB,QAAlB,CAA2B3H,IAA3B,CAAX,2CAAA0B,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAI,KAAKwG,SAAL,KAAmB7I,SAAS,CAAC+I,WAAjC,EAA8C;AAC5C,aAAO,KAAKvE,WAAZ;AACD,KAFD,MAEO;AACL,UAAMuF,wBAAwB,GAAG,IAAIH,UAAJ,CAAahJ,GAAb,EAAkBqE,GAAlB,CAAsByE,iBAAtB,EAAyC5E,QAAzC,CAAkD,KAAKN,WAAL,CAAiBE,QAAnE,EAC5BA,QADL;AAEA,aAAOS,gBAAc,CAACC,aAAf,CAA6B,KAAKZ,WAAL,CAAiBZ,QAA9C,EAAwDmG,wBAAxD,CAAP;AACD;AACF;AAED;;;;;;;;;;;;;;AAjIF;;AAAA,QA+IgBC,gBA/IhB,GA+IS,0BACHlD,KADG,EAEHmD,gBAFG,EAGHC,WAHG;AAMHC,EAAAA,YANG,EAOHC,YAPG,EAQHC,UARG;kCAIoD;kCAArDC;QAAAA,gDAAgB;4BAAGC;QAAAA,oCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBC;AAAAA,MAAAA,eAAyCH;;;QACzCI;AAAAA,MAAAA,aAA8D;;;AAEhE,MAAUvD,KAAK,CAACG,MAAN,GAAe,CAAzB,4CAAA5E,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;AACA,MAAUkI,OAAO,GAAG,CAApB,4CAAAlI,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU4H,gBAAgB,KAAKG,YAArB,IAAqCD,YAAY,CAAClD,MAAb,GAAsB,CAArE,4CAAA5E,SAAS,QAA+D,mBAA/D,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAMgH,QAAQ,GAAGe,YAAY,CAAC/C,OAA9B;AACA,QAAMmD,QAAQ,GAAGN,WAAW,CAAC7C,OAA7B;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACG,MAA1B,EAAkCO,CAAC,EAAnC,EAAuC;AACrC,UAAML,IAAI,GAAGL,KAAK,CAACU,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACL,IAAI,CAAChE,MAAL,CAAYT,MAAZ,CAAmB2G,QAAQ,CAACzF,QAA5B,CAAD,IAA0C,CAACuD,IAAI,CAAC/D,MAAL,CAAYV,MAAZ,CAAmB2G,QAAQ,CAACzF,QAA5B,CAA/C,EAAsF;AACtF,UAAIuD,IAAI,CAAC9C,QAAL,CAAcgE,OAAd,CAAsB1H,IAAtB,KAA+BwG,IAAI,CAAC7C,QAAL,CAAc+D,OAAd,CAAsB1H,IAAtB,CAAnC,EAAgE;AAEhE,UAAI4I,SAAgC,SAApC;;AACA,UAAI;AACF;;AADE,qCACapC,IAAI,CAAC5C,eAAL,CAAqB8E,QAArB,CADb;;AACAE,QAAAA,SADA;AAEH,OAFD,CAEE,OAAOkB,KAAP,EAAc;AACd;AACA,YAAKA,KAAsC,CAACC,8BAA5C,EAA4E;AAC1E;AACD;;AACD,cAAMD,KAAN;AACD,OAfoC;;;AAiBrC,UAAIlB,SAAS,CAAC3F,QAAV,CAAmBlB,MAAnB,CAA0B8H,QAA1B,CAAJ,EAAyC;AACvCG,QAAAA,YAAY,CACRN,UADQ,EAER,IAAI1B,KAAJ,CACI,IAAI9B,KAAJ,WAAcsD,YAAd,GAA4BhD,IAA5B,IAAmC8C,gBAAgB,CAACrG,QAApD,EAA8DsG,WAA9D,CADJ,EAEID,gBAFJ,EAGIjK,SAAS,CAAC+I,WAHd,CAFQ,EAORuB,aAPQ,EAQR/B,eARQ,CAAZ;AAUD,OAXD,MAWO,IAAIgC,OAAO,GAAG,CAAV,IAAezD,KAAK,CAACG,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM2D,sBAAsB,GAAG9D,KAAK,CAACgB,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBqD,MAAlB,CAAyB/D,KAAK,CAACgB,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBV,KAAK,CAACG,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1C0B,QAAAA,KAAK,CAACqB,gBAAN,CACIY,sBADJ,EAEIX,gBAFJ,EAGIC,WAHJ,EAII;AACEI,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJJ,YAQQJ,YARR,GAQsBhD,IARtB,IASIoC,SATJ,EAUIc,UAVJ;AAYD;AACF;;AAED,WAAOA,UAAP;AACD;AAED;;;;AAjNF;;AAAA,SAqNSS,mBArNT,GAqNS,6BAAoBpB,iBAApB;AACL,WAAO,IAAI9C,OAAJ,CACH,KAAKpC,WAAL,CAAiBZ,QADd,EAEH,KAAKsB,YAAL,CAAkBtB,QAFf,EAGH,KAAKkG,eAAL,CAAqBJ,iBAArB,EAAwChF,QAHrC,EAIH,KAAK+E,gBAAL,CAAsBC,iBAAtB,EAAyChF,QAJtC,CAAP;AAMD;AAED;;;;;;;;;;;;;;;AA9NF;;AAAA,QA6OgBqG,iBA7OhB,GA6OS,2BACHjE,KADG,EAEHkE,UAFG,EAGHC,iBAHG;AAMHd,EAAAA,YANG,EAOHe,aAPG,EAQHb,UARG;oCAIoD;oCAArDC;QAAAA,iDAAgB;8BAAGC;QAAAA,qCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBe;AAAAA,MAAAA,gBAA0CD;;;QAC1CZ;AAAAA,MAAAA,aAA+D;;;AAEjE,MAAUvD,KAAK,CAACG,MAAN,GAAe,CAAzB,4CAAA5E,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;AACA,MAAUkI,OAAO,GAAG,CAApB,4CAAAlI,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU4I,iBAAiB,KAAKC,aAAtB,IAAuCf,YAAY,CAAClD,MAAb,GAAsB,CAAvE,4CAAA5E,SAAS,QAAiE,mBAAjE,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAMkH,SAAS,GAAG2B,aAAa,CAAC7D,OAAhC;AACA,QAAM8D,OAAO,GAAGH,UAAU,CAAC3D,OAA3B;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACG,MAA1B,EAAkCO,CAAC,EAAnC,EAAuC;AACrC,UAAML,IAAI,GAAGL,KAAK,CAACU,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACL,IAAI,CAAChE,MAAL,CAAYT,MAAZ,CAAmB6G,SAAS,CAAC3F,QAA7B,CAAD,IAA2C,CAACuD,IAAI,CAAC/D,MAAL,CAAYV,MAAZ,CAAmB6G,SAAS,CAAC3F,QAA7B,CAAhD,EAAwF;AACxF,UAAIuD,IAAI,CAAC9C,QAAL,CAAcgE,OAAd,CAAsB1H,IAAtB,KAA+BwG,IAAI,CAAC7C,QAAL,CAAc+D,OAAd,CAAsB1H,IAAtB,CAAnC,EAAgE;AAEhE,UAAI0I,QAA+B,SAAnC;;AACA,UAAI;AACF;;AADE,oCACYlC,IAAI,CAAC5B,cAAL,CAAoBgE,SAApB,CADZ;;AACAF,QAAAA,QADA;AAEH,OAFD,CAEE,OAAOoB,KAAP,EAAc;AACd;AACA,YAAKA,KAAmC,CAACW,2BAAzC,EAAsE;AACpE;AACD;;AACD,cAAMX,KAAN;AACD,OAfoC;;;AAiBrC,UAAIpB,QAAQ,CAACzF,QAAT,CAAkBlB,MAAlB,CAAyByI,OAAzB,CAAJ,EAAuC;AACrCR,QAAAA,YAAY,CACRN,UADQ,EAER,IAAI1B,KAAJ,CACI,IAAI9B,KAAJ,EAAWM,IAAX,SAAoBgD,YAApB,GAAmCa,UAAnC,EAA+CC,iBAAiB,CAACrH,QAAjE,CADJ,EAEIqH,iBAFJ,EAGIjL,SAAS,CAACwJ,YAHd,CAFQ,EAORc,aAPQ,EAQR/B,eARQ,CAAZ;AAUD,OAXD,MAWO,IAAIgC,OAAO,GAAG,CAAV,IAAezD,KAAK,CAACG,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM2D,sBAAsB,GAAG9D,KAAK,CAACgB,KAAN,CAAY,CAAZ,EAAeN,CAAf,EAAkBqD,MAAlB,CAAyB/D,KAAK,CAACgB,KAAN,CAAYN,CAAC,GAAG,CAAhB,EAAmBV,KAAK,CAACG,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1C0B,QAAAA,KAAK,CAACoC,iBAAN,CACIH,sBADJ,EAEII,UAFJ,EAGIC,iBAHJ,EAII;AACEX,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJJ,GAQKpD,IARL,SAQcgD,YARd,GASId,QATJ,EAUIgB,UAVJ;AAYD;AACF;;AAED,WAAOA,UAAP;AACD,GA7SH;;AAAA;AAAA;;SChEgBgB,wBAAwB7I;AACtC,MAAI;AACF,QAAM8I,kBAAkB,GAAGxH,UAAU,CAACtB,OAAD,CAArC;AACA,4CAAA+I,OAAO,CAAC/I,OAAO,KAAK8I,kBAAb,EAAoC9I,OAApC,0BAAP;AACA,WAAO8I,kBAAP;AACD,GAJD,CAIE,OAAOb,KAAP,EAAc;AACd,6CAAApI,SAAS,QAAWG,OAAX,8BAAT,GAAAH,SAAS,OAAT;AACD;AACF;AAED,SAAgBmJ,eAAeC;AAC7B,SAAOA,SAAS,YAAYhL,IAArB,GACHgL,SADG,GAEH,OAAOA,SAAP,KAAqB,QAArB,GACAhL,IAAI,CAACC,MAAL,CAAY+K,SAAS,CAAClF,QAAV,EAAZ,CADA,GAEA9F,IAAI,CAACC,MAAL,CAAY+K,SAAZ,CAJJ;AAKD;;;ACpBD,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxB9L,QAAQ,CAAC+L,UADe,IACFN,OAAO,CAACM,UADN,wBAExB/L,QAAQ,CAACgM,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxBhM,QAAQ,CAACiM,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClBlM,QAAQ,CAAC+L,UADS,KAAA,mBAElB/L,QAAQ,CAACgM,aAFS,KAAA,mBAGlBhM,QAAQ,CAACiM,QAHS,KAAA,mBAArB;AAMA,IAAatC,QAAb;AAIE,oBAAmB7E,SAAnB,EAAyCC,WAAzC;QAAyCA;AAAAA,MAAAA,cAAyBpE;;;AAChE,SAAKmE,SAAL,GAAiByG,cAAc,CAACzG,SAAD,CAA/B;AACA,SAAKC,WAAL,GAAmBwG,cAAc,CAACxG,WAAD,CAAjC;AACD,GAPH;;;AAAA;;AAAA,SAmBS6E,MAnBT,GAmBS;AACL,WAAO,IAAID,QAAJ,CAAa,KAAK5E,WAAlB,EAA+B,KAAKD,SAApC,CAAP;AACD,GArBH;;AAAA,SAuBSE,GAvBT,GAuBS,aAAItC,KAAJ;AACL,QAAMyJ,WAAW,GAAGzJ,KAAK,YAAYiH,QAAjB,GAA4BjH,KAA5B,GAAoC,IAAIiH,QAAJ,CAAa4B,cAAc,CAAC7I,KAAD,CAA3B,CAAxD;;AACA,QAAIlC,IAAI,CAACgE,KAAL,CAAW,KAAKO,WAAhB,EAA6BoH,WAAW,CAACpH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAI4E,QAAJ,CAAanJ,IAAI,CAACwE,GAAL,CAAS,KAAKF,SAAd,EAAyBqH,WAAW,CAACrH,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;AACD;;AACD,WAAO,IAAI4E,QAAJ,CACLnJ,IAAI,CAACwE,GAAL,CACExE,IAAI,CAACqE,QAAL,CAAc,KAAKC,SAAnB,EAA8BqH,WAAW,CAACpH,WAA1C,CADF,EAEEvE,IAAI,CAACqE,QAAL,CAAcsH,WAAW,CAACrH,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLvE,IAAI,CAACqE,QAAL,CAAc,KAAKE,WAAnB,EAAgCoH,WAAW,CAACpH,WAA5C,CALK,CAAP;AAOD,GAnCH;;AAAA,SAqCSM,QArCT,GAqCS,kBAAS3C,KAAT;AACL,QAAMyJ,WAAW,GAAGzJ,KAAK,YAAYiH,QAAjB,GAA4BjH,KAA5B,GAAoC,IAAIiH,QAAJ,CAAa4B,cAAc,CAAC7I,KAAD,CAA3B,CAAxD;;AACA,QAAIlC,IAAI,CAACgE,KAAL,CAAW,KAAKO,WAAhB,EAA6BoH,WAAW,CAACpH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAI4E,QAAJ,CAAanJ,IAAI,CAAC6E,QAAL,CAAc,KAAKP,SAAnB,EAA8BqH,WAAW,CAACrH,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;AACD;;AACD,WAAO,IAAI4E,QAAJ,CACLnJ,IAAI,CAAC6E,QAAL,CACE7E,IAAI,CAACqE,QAAL,CAAc,KAAKC,SAAnB,EAA8BqH,WAAW,CAACpH,WAA1C,CADF,EAEEvE,IAAI,CAACqE,QAAL,CAAcsH,WAAW,CAACrH,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLvE,IAAI,CAACqE,QAAL,CAAc,KAAKE,WAAnB,EAAgCoH,WAAW,CAACpH,WAA5C,CALK,CAAP;AAOD,GAjDH;;AAAA,SAmDSsD,QAnDT,GAmDS,kBAAS3F,KAAT;AACL,QAAMyJ,WAAW,GAAGzJ,KAAK,YAAYiH,QAAjB,GAA4BjH,KAA5B,GAAoC,IAAIiH,QAAJ,CAAa4B,cAAc,CAAC7I,KAAD,CAA3B,CAAxD;AACA,WAAOlC,IAAI,CAAC6H,QAAL,CACL7H,IAAI,CAACqE,QAAL,CAAc,KAAKC,SAAnB,EAA8BqH,WAAW,CAACpH,WAA1C,CADK,EAELvE,IAAI,CAACqE,QAAL,CAAcsH,WAAW,CAACrH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzDH;;AAAA,SA2DSqD,OA3DT,GA2DS,iBAAQ1F,KAAR;AACL,QAAMyJ,WAAW,GAAGzJ,KAAK,YAAYiH,QAAjB,GAA4BjH,KAA5B,GAAoC,IAAIiH,QAAJ,CAAa4B,cAAc,CAAC7I,KAAD,CAA3B,CAAxD;AACA,WAAOlC,IAAI,CAACgE,KAAL,CACLhE,IAAI,CAACqE,QAAL,CAAc,KAAKC,SAAnB,EAA8BqH,WAAW,CAACpH,WAA1C,CADK,EAELvE,IAAI,CAACqE,QAAL,CAAcsH,WAAW,CAACrH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjEH;;AAAA,SAmESiB,WAnET,GAmES,qBAAYtD,KAAZ;AACL,QAAMyJ,WAAW,GAAGzJ,KAAK,YAAYiH,QAAjB,GAA4BjH,KAA5B,GAAoC,IAAIiH,QAAJ,CAAa4B,cAAc,CAAC7I,KAAD,CAA3B,CAAxD;AACA,WAAOlC,IAAI,CAACwF,WAAL,CACLxF,IAAI,CAACqE,QAAL,CAAc,KAAKC,SAAnB,EAA8BqH,WAAW,CAACpH,WAA1C,CADK,EAELvE,IAAI,CAACqE,QAAL,CAAcsH,WAAW,CAACrH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzEH;;AAAA,SA2ESF,QA3ET,GA2ES,kBAASnC,KAAT;AACL,QAAMyJ,WAAW,GAAGzJ,KAAK,YAAYiH,QAAjB,GAA4BjH,KAA5B,GAAoC,IAAIiH,QAAJ,CAAa4B,cAAc,CAAC7I,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIiH,QAAJ,CACLnJ,IAAI,CAACqE,QAAL,CAAc,KAAKC,SAAnB,EAA8BqH,WAAW,CAACrH,SAA1C,CADK,EAELtE,IAAI,CAACqE,QAAL,CAAc,KAAKE,WAAnB,EAAgCoH,WAAW,CAACpH,WAA5C,CAFK,CAAP;AAID,GAjFH;;AAAA,SAmFSK,MAnFT,GAmFS,gBAAO1C,KAAP;AACL,QAAMyJ,WAAW,GAAGzJ,KAAK,YAAYiH,QAAjB,GAA4BjH,KAA5B,GAAoC,IAAIiH,QAAJ,CAAa4B,cAAc,CAAC7I,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIiH,QAAJ,CACLnJ,IAAI,CAACqE,QAAL,CAAc,KAAKC,SAAnB,EAA8BqH,WAAW,CAACpH,WAA1C,CADK,EAELvE,IAAI,CAACqE,QAAL,CAAc,KAAKE,WAAnB,EAAgCoH,WAAW,CAACrH,SAA5C,CAFK,CAAP;AAID,GAzFH;;AAAA,SA2FSsH,aA3FT,GA2FS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBvM,QAAQ,CAACgM;;;AAE9B,KAAU9J,MAAM,CAACG,SAAP,CAAiBgK,iBAAjB,CAAV,2CAAAjK,SAAS,QAAyCiK,iBAAzC,yBAAT,GAAAjK,SAAS,OAAT;AACA,MAAUiK,iBAAiB,GAAG,CAA9B,4CAAAjK,SAAS,QAA2BiK,iBAA3B,uBAAT,GAAAjK,SAAS,OAAT;AAEAqJ,IAAAA,OAAO,CAACgB,GAAR,CAAY;AAAEC,MAAAA,SAAS,EAAEL,iBAAiB,GAAG,CAAjC;AAAoCE,MAAAA,QAAQ,EAAET,qBAAqB,CAACS,QAAD;AAAnE,KAAZ;AACA,QAAM9H,QAAQ,GAAG,IAAIgH,OAAJ,CAAY,KAAK3G,SAAL,CAAewB,QAAf,EAAZ,EACdqG,GADc,CACV,KAAK5H,WAAL,CAAiBuB,QAAjB,EADU,EAEdsG,mBAFc,CAEMP,iBAFN,CAAjB;AAGA,WAAO5H,QAAQ,CAACiH,QAAT,CAAkBjH,QAAQ,CAACoI,aAAT,EAAlB,EAA4CP,MAA5C,CAAP;AACD,GAxGH;;AAAA,SA0GSQ,OA1GT,GA0GS,iBACLD,aADK,EAELP,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBvM,QAAQ,CAACgM;;;AAE9B,KAAU9J,MAAM,CAACG,SAAP,CAAiBwK,aAAjB,CAAV,2CAAAzK,SAAS,QAAqCyK,aAArC,yBAAT,GAAAzK,SAAS,OAAT;AACA,MAAUyK,aAAa,IAAI,CAA3B,4CAAAzK,SAAS,QAAwByK,aAAxB,mBAAT,GAAAzK,SAAS,OAAT;AAEAwJ,IAAAA,GAAG,CAACmB,EAAJ,GAASF,aAAT;AACAjB,IAAAA,GAAG,CAACoB,EAAJ,GAASd,eAAe,CAACK,QAAD,CAAxB;AACA,WAAO,IAAIX,GAAJ,CAAQ,KAAK9G,SAAL,CAAewB,QAAf,EAAR,EAAmCqG,GAAnC,CAAuC,KAAK5H,WAAL,CAAiBuB,QAAjB,EAAvC,EAAoEoF,QAApE,CAA6EmB,aAA7E,EAA4FP,MAA5F,CAAP;AACD,GArHH;;AAAA;AAAA;AAAA;AAWI,aAAO9L,IAAI,CAAC4E,MAAL,CAAY,KAAKN,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;AACD,KAZH;;AAAA;AAAA;AAAA;AAgBI,aAAO,IAAI4E,QAAJ,CAAanJ,IAAI,CAACyM,SAAL,CAAe,KAAKnI,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;AACD;AAjBH;;AAAA;AAAA;;ACtBA,IAAMmI,YAAY,gBAAG,IAAIvD,QAAJ,CAAa9I,IAAb,CAArB;;AAEA,IAAasM,OAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACSf,aADT,GACS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKxH,QAAL,CAAcqI,YAAd,EAA4Bd,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAHH;;AAAA,SAKSO,OALT,GAKS,iBAAQD,aAAR,EAAmCP,MAAnC,EAAoDC,QAApD;QAAQM;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKhI,QAAL,CAAcqI,YAAd,EAA4BJ,OAA5B,CAAoCD,aAApC,EAAmDP,MAAnD,EAA2DC,QAA3D,CAAP;AACD,GAPH;;AAAA;AAAA,EAA6B5C,QAA7B;;ACIA,IAAMiC,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAa3G,cAAb;AAAA;;AA4BE,0BAAsBvB,QAAtB,EAAmCmB,SAAnC,EAAyDC,WAAzD;;;AACE,iCAAMD,SAAN,EAAiBC,WAAjB;AACA,KAAUvE,IAAI,CAACuF,eAAL,CAAqB,MAAKtB,QAA1B,EAAoCrD,UAApC,CAAV,2CAAAgB,SAAS,QAAkD,QAAlD,CAAT,GAAAA,SAAS,OAAT;AACA,UAAKuB,QAAL,GAAgBA,QAAhB;AACA,UAAKyJ,YAAL,GAAoB5M,IAAI,CAAC6M,YAAL,CAAkB7M,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYkD,QAAQ,CAAC3B,QAArB,CAAnC,CAApB;;AACD;AA5BD;;;;;;;AALF,iBAUgBmD,aAVhB,GAUS,uBAAyCxB,QAAzC,EAAsD2J,SAAtD;AACL,WAAO,IAAIpI,cAAJ,CAAmBvB,QAAnB,EAA6B2J,SAA7B,CAAP;AACD;AAED;;;;;;AAdF;;AAAA,iBAoBgBvE,oBApBhB,GAoBS,8BACHpF,QADG,EAEHmB,SAFG,EAGHC,WAHG;AAKL,WAAO,IAAIG,cAAJ,CAAmBvB,QAAnB,EAA6BmB,SAA7B,EAAwCC,WAAxC,CAAP;AACD,GA1BH;;AAAA;;AAAA,SAmCSC,GAnCT,GAmCS,aAAItC,KAAJ;AACL,KAAU,KAAKiB,QAAL,CAAclB,MAAd,CAAqBC,KAAK,CAACiB,QAA3B,CAAV,2CAAAvB,SAAS,QAAuC,UAAvC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAMmL,KAAK,uBAASvI,GAAT,YAAatC,KAAb,CAAX;;AACA,WAAOwC,cAAc,CAAC6D,oBAAf,CAAoC,KAAKpF,QAAzC,EAAmD4J,KAAK,CAACzI,SAAzD,EAAoEyI,KAAK,CAACxI,WAA1E,CAAP;AACD,GAvCH;;AAAA,SAyCSM,QAzCT,GAyCS,kBAAS3C,KAAT;AACL,KAAU,KAAKiB,QAAL,CAAclB,MAAd,CAAqBC,KAAK,CAACiB,QAA3B,CAAV,2CAAAvB,SAAS,QAAuC,UAAvC,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAMoL,UAAU,uBAASnI,QAAT,YAAkB3C,KAAlB,CAAhB;;AACA,WAAOwC,cAAc,CAAC6D,oBAAf,CAAoC,KAAKpF,QAAzC,EAAmD6J,UAAU,CAAC1I,SAA9D,EAAyE0I,UAAU,CAACzI,WAApF,CAAP;AACD,GA7CH;;AAAA,SA+CSF,QA/CT,GA+CS,kBAASnC,KAAT;AACL,QAAM+K,UAAU,uBAAS5I,QAAT,YAAkBnC,KAAlB,CAAhB;;AACA,WAAOwC,cAAc,CAAC6D,oBAAf,CAAoC,KAAKpF,QAAzC,EAAmD8J,UAAU,CAAC3I,SAA9D,EAAyE2I,UAAU,CAAC1I,WAApF,CAAP;AACD,GAlDH;;AAAA,SAoDSK,MApDT,GAoDS,gBAAO1C,KAAP;AACL,QAAMgL,OAAO,uBAAStI,MAAT,YAAgB1C,KAAhB,CAAb;;AACA,WAAOwC,cAAc,CAAC6D,oBAAf,CAAoC,KAAKpF,QAAzC,EAAmD+J,OAAO,CAAC5I,SAA3D,EAAsE4I,OAAO,CAAC3I,WAA9E,CAAP;AACD,GAvDH;;AAAA,SAyDSqH,aAzDT,GAyDS,uBAAcC,iBAAd,EAAqCC,MAArC,EAAsDC,QAAtD;QAAcF;AAAAA,MAAAA,oBAAoB;;;QAAoBE;AAAAA,MAAAA,WAAqBvM,QAAQ,CAAC+L;;;AACzF,WAAO,oBAAM3G,MAAN,YAAa,KAAKgI,YAAlB,EAAgChB,aAAhC,CAA8CC,iBAA9C,EAAiEC,MAAjE,EAAyEC,QAAzE,CAAP;AACD,GA3DH;;AAAA,SA6DSO,OA7DT,GA6DS,iBACHD,aADG,EAEHP,MAFG,EAGHC,QAHG;QACHM;AAAAA,MAAAA,gBAAwB,KAAKlJ,QAAL,CAAc3B;;;QAEtCuK;AAAAA,MAAAA,WAAqBvM,QAAQ,CAAC+L;;;AAEhC,MAAUc,aAAa,IAAI,KAAKlJ,QAAL,CAAc3B,QAAzC,4CAAAI,SAAS,QAA0C,UAA1C,CAAT,GAAAA,SAAS,OAAT;AACA,WAAO,oBAAMgD,MAAN,YAAa,KAAKgI,YAAlB,EAAgCN,OAAhC,CAAwCD,aAAxC,EAAuDP,MAAvD,EAA+DC,QAA/D,CAAP;AACD,GApEH;;AAAA,SAsESoB,OAtET,GAsES,iBAAQrB,MAAR;QAAQA;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;AAC9BZ,IAAAA,KAAG,CAACmB,EAAJ,GAAS,KAAKpJ,QAAL,CAAc3B,QAAvB;AACA,WAAO,IAAI4J,KAAJ,CAAQ,KAAKnH,QAAL,CAAc6B,QAAd,EAAR,EAAkCqG,GAAlC,CAAsC,KAAKS,YAAL,CAAkB9G,QAAlB,EAAtC,EAAoEoF,QAApE,CAA6EY,MAA7E,CAAP;AACD,GAzEH;;AAAA;AAAA;AAAA;AA4EI,UAAI,KAAK3I,QAAL,CAAchB,OAAlB,EAA2B,OAAO,IAAP;AAC3B,aAAOuC,cAAc,CAAC6D,oBAAf,CAAoC,KAAKpF,QAAL,CAAcyD,OAAlD,EAA2D,KAAKtC,SAAhE,EAA2E,KAAKC,WAAhF,CAAP;AACD;AA9EH;;AAAA;AAAA,EAAwD4E,QAAxD;;ICHahD,KAAb;AAAA;;AAOE;;;;AAIA;;;AAKE,QAAIiH,YAAJ;AACA,QAAIC,aAAJ;AACA,QAAI9I,WAAJ;AACA,QAAID,SAAJ;;sCAPKgJ;AAAAA,MAAAA;;;AASL,QAAIA,IAAI,CAAC9G,MAAL,KAAgB,CAApB,EAAuB;AACrB,AACE4G,MAAAA,YAFmB,GAEoCE,IAFpC;AAELD,MAAAA,aAFK,GAEoCC,IAFpC;AAEU/I,MAAAA,WAFV,GAEoC+I,IAFpC;AAEuBhJ,MAAAA,SAFvB,GAEoCgJ,IAFpC;AAGtB,KAHD,MAGO;AACL,UAAMpH,MAAM,GAAGoH,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,CAAoB3I,MAApB,CAA2B0I,IAAI,CAAC,CAAD,CAAJ,CAAQE,UAAnC,CAAf;AADK,iBAEoD,CACvDF,IAAI,CAAC,CAAD,CAAJ,CAAQE,UAAR,CAAmBrK,QADoC,EAEvDmK,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,CAAoBpK,QAFmC,EAGvD+C,MAAM,CAAC3B,WAHgD,EAIvD2B,MAAM,CAAC5B,SAJgD,CAFpD;AAEH8I,MAAAA,YAFG;AAEWC,MAAAA,aAFX;AAE0B9I,MAAAA,WAF1B;AAEuCD,MAAAA,SAFvC;AAQN;;AACD,iCAAMA,SAAN,EAAiBC,WAAjB;AAEA,UAAK6I,YAAL,GAAoBA,YAApB;AACA,UAAKC,aAAL,GAAqBA,aAArB;AACA,UAAKI,MAAL,GAAc,IAAItE,QAAJ,CACVnJ,IAAI,CAAC6M,YAAL,CAAkB7M,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYmN,YAAY,CAAC5L,QAAzB,CAAnC,CADU,EAEVxB,IAAI,CAAC6M,YAAL,CAAkB7M,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAlB,EAAmCD,IAAI,CAACC,MAAL,CAAYoN,aAAa,CAAC7L,QAA1B,CAAnC,CAFU,CAAd;;AAID;AAED;;;;;AA3CF;;AAAA,SA8CS4H,MA9CT,GA8CS;AACL,WAAO,IAAIjD,KAAJ,CAAU,KAAKkH,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAK9I,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;AACD;AAED;;;;AAlDF;;AAAA,SAsDSF,QAtDT,GAsDS,kBAAuCnC,KAAvC;AACL,KAAU,KAAKmL,aAAL,CAAmBpL,MAAnB,CAA0BC,KAAK,CAACkL,YAAhC,CAAV,2CAAAxL,SAAS,QAAgD,OAAhD,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAM8L,QAAQ,uBAASrJ,QAAT,YAAkBnC,KAAlB,CAAd;;AACA,WAAO,IAAIiE,KAAJ,CAAU,KAAKiH,YAAf,EAA6BlL,KAAK,CAACmL,aAAnC,EAAkDK,QAAQ,CAACnJ,WAA3D,EAAwEmJ,QAAQ,CAACpJ,SAAjF,CAAP;AACD;AAED;;;;AA5DF;;AAAA,SAgESqJ,KAhET,GAgES,eAAMC,cAAN;AACL,KAAUA,cAAc,CAACzK,QAAf,CAAwBlB,MAAxB,CAA+B,KAAKmL,YAApC,CAAV,2CAAAxL,SAAS,QAAoD,OAApD,CAAT,GAAAA,SAAS,OAAT;;AACA,QAAMsE,MAAM,uBAAS7B,QAAT,YAAkBuJ,cAAlB,CAAZ;;AACA,WAAOlJ,cAAc,CAAC6D,oBAAf,CAAoC,KAAK8E,aAAzC,EAAwDnH,MAAM,CAAC5B,SAA/D,EAA0E4B,MAAM,CAAC3B,WAAjF,CAAP;AACD;AAED;;;;AAtEF;;AAAA,SA8ESqH,aA9ET,GA8ES,uBAAcC,iBAAd,EAAqCC,MAArC,EAAsDC,QAAtD;QAAcF;AAAAA,MAAAA,oBAAoB;;;AACvC,WAAO,KAAKgC,mBAAL,CAAyBjC,aAAzB,CAAuCC,iBAAvC,EAA0DC,MAA1D,EAAkEC,QAAlE,CAAP;AACD,GAhFH;;AAAA,SAkFSO,OAlFT,GAkFS,iBAAQD,aAAR,EAA2BP,MAA3B,EAA4CC,QAA5C;QAAQM;AAAAA,MAAAA,gBAAgB;;;AAC7B,WAAO,KAAKwB,mBAAL,CAAyBvB,OAAzB,CAAiCD,aAAjC,EAAgDP,MAAhD,EAAwDC,QAAxD,CAAP;AACD,GApFH;;AAAA;AAAA;AAAA;AA2EI,iCAAa1H,QAAb,YAAsB,KAAKoJ,MAA3B;AACD;AA5EH;;AAAA;AAAA,EAA4EtE,QAA5E;;ACgDA,SAAS2E,KAAT,CAAeF,cAAf;AACE,gBAAYA,cAAc,CAAC3J,QAAf,CAAwB6B,QAAxB,CAAiC,EAAjC,CAAZ;AACD;;AAED,IAAMiI,QAAQ,GAAG,KAAjB;AAEA;;;;AAGA,IAAsBC,MAAtB;AAAA;;AACE;;;;;AADF,SAMgBC,kBANhB,GAMS,4BACHC,KADG,EAEHC,OAFG;AAIL,QAAMC,OAAO,GAAGF,KAAK,CAACnK,WAAN,CAAkBZ,QAAlB,CAA2BkL,QAA3C;AACA,QAAMC,QAAQ,GAAGJ,KAAK,CAACzJ,YAAN,CAAmBtB,QAAnB,CAA4BkL,QAA7C;;AAEA,KAAU,EAAED,OAAO,IAAIE,QAAb,CAAV,2CAAA1M,SAAS,QAAyB,cAAzB,CAAT,GAAAA,SAAS,OAAT;AACA,MAAU,EAAE,SAASuM,OAAX,KAAuBA,OAAO,CAACI,GAAR,GAAc,CAA/C,4CAAA3M,SAAS,QAAyC,KAAzC,CAAT,GAAAA,SAAS,OAAT;AAEA,QAAM4M,EAAE,GAAW5D,uBAAuB,CAACuD,OAAO,CAACM,SAAT,CAA1C;AACA,QAAM7F,QAAQ,GAAWkF,KAAK,CAACI,KAAK,CAAC7E,eAAN,CAAsB8E,OAAO,CAACO,eAA9B,CAAD,CAA9B;AACA,QAAM5F,SAAS,GAAWgF,KAAK,CAACI,KAAK,CAAClF,gBAAN,CAAuBmF,OAAO,CAACO,eAA/B,CAAD,CAA/B;AACA,QAAM7H,IAAI,GAAaqH,KAAK,CAACjG,KAAN,CAAYpB,IAAZ,CAAiB8H,GAAjB,CAAqB,UAACpL,KAAD;AAAA,aAAkBA,KAAK,CAACxB,OAAxB;AAAA,KAArB,CAAvB;AACA,QAAM6M,QAAQ,GACV,SAAST,OAAT,UACW,CAACU,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,IAA0Cb,OAAO,CAACI,GAAnD,EAAwDzI,QAAxD,CAAiE,EAAjE,CADX,UAEWqI,OAAO,CAACS,QAAR,CAAiB9I,QAAjB,CAA0B,EAA1B,CAHf;AAKA,QAAMmJ,gBAAgB,GAAGC,OAAO,CAACf,OAAO,CAACgB,aAAT,CAAhC;AAEA,QAAIC,UAAJ;AACA,QAAI9B,IAAJ;AACA,QAAI+B,KAAJ;;AAGA,YAAQnB,KAAK,CAAC9F,SAAd;AACE,WAAK7I,SAAS,CAAC+I,WAAf;AACE,YAAI8F,OAAJ,EAAa;AACXgB,UAAAA,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADW;;AAGX3B,UAAAA,IAAI,GAAG,CAACxE,SAAD,EAAYjC,IAAZ,EAAkB2H,EAAlB,EAAsBI,QAAtB,CAAP;AACAS,UAAAA,KAAK,GAAGzG,QAAR;AACD,SALD,MAKO,IAAI0F,QAAJ,EAAc;AACnBc,UAAAA,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADmB;;AAGnB3B,UAAAA,IAAI,GAAG,CAAC1E,QAAD,EAAWE,SAAX,EAAsBjC,IAAtB,EAA4B2H,EAA5B,EAAgCI,QAAhC,CAAP;AACAS,UAAAA,KAAK,GAAGtB,QAAR;AACD,SALM,MAKA;AACLqB,UAAAA,UAAU,GAAGH,gBAAgB,GACvB,uDADuB,GAEvB,0BAFN,CADK;;AAKL3B,UAAAA,IAAI,GAAG,CAAC1E,QAAD,EAAWE,SAAX,EAAsBjC,IAAtB,EAA4B2H,EAA5B,EAAgCI,QAAhC,CAAP;AACAS,UAAAA,KAAK,GAAGtB,QAAR;AACD;;AACD;;AACF,WAAKxO,SAAS,CAACwJ,YAAf;AACE,SAAU,CAACkG,gBAAX,2CAAArN,SAAS,QAAoB,eAApB,CAAT,GAAAA,SAAS,OAAT;;AACA,YAAIwM,OAAJ,EAAa;AACXgB,UAAAA,UAAU,GAAG,uBAAb,CADW;;AAGX9B,UAAAA,IAAI,GAAG,CAACxE,SAAD,EAAYjC,IAAZ,EAAkB2H,EAAlB,EAAsBI,QAAtB,CAAP;AACAS,UAAAA,KAAK,GAAGzG,QAAR;AACD,SALD,MAKO,IAAI0F,QAAJ,EAAc;AACnBc,UAAAA,UAAU,GAAG,uBAAb,CADmB;;AAGnB9B,UAAAA,IAAI,GAAG,CAACxE,SAAD,EAAYF,QAAZ,EAAsB/B,IAAtB,EAA4B2H,EAA5B,EAAgCI,QAAhC,CAAP;AACAS,UAAAA,KAAK,GAAGtB,QAAR;AACD,SALM,MAKA;AACLqB,UAAAA,UAAU,GAAG,0BAAb,CADK;;AAGL9B,UAAAA,IAAI,GAAG,CAACxE,SAAD,EAAYF,QAAZ,EAAsB/B,IAAtB,EAA4B2H,EAA5B,EAAgCI,QAAhC,CAAP;AACAS,UAAAA,KAAK,GAAGtB,QAAR;AACD;;AACD;AAvCJ;;AA0CA,WAAO;AACLqB,MAAAA,UAAU,EAAVA,UADK;AAEL9B,MAAAA,IAAI,EAAJA,IAFK;AAGL+B,MAAAA,KAAK,EAALA;AAHK,KAAP;AAKD,GA/EH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA,IAAIC,oBAAoB,sDACrBhQ,OAAO,CAACI,OADa,IACH;AACjB,gDAA8C,CAD7B;;AAAA,CADG,wBAAxB;AAMA;;;;AAGA,IAAsB6P,OAAtB;AACE;;;AAGA;AAEA;;;;;;;;;;AANF,UAcsBC,cAdtB,2BAeMjO,OAfN,EAgBMQ,OAhBN,EAiBM0N,QAjBN,EAkBMhO,MAlBN,EAmBMT,IAnBN;AAAA;;;mCAqBU0O;AAaN,eAAO,IAAI5N,KAAJ,CAAUP,OAAV,EAAmBQ,OAAnB,EAA4B2N,cAA5B,EAA4CjO,MAA5C,EAAoDT,IAApD,CAAP;;;UAjBEyO,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAACrO,OAAD,CAAX;;mBAK3B,kCAAO+N,oBAAP,qFAAO,uBAAuB/N,OAAvB,CAAP,2DAAO,uBAAkCQ,OAAlC,CAAP,MAAsD;;6CAChDuN,oBAAoB,CAAC/N,OAAD,CAApB,CAA8BQ,OAA9B,qBACM,IAAI8N,QAAJ,CAAa9N,OAAb,EAAsB+N,KAAtB,EAA6BL,QAA7B,EAAuCjO,QAAvC,GAAkDuO,IAAlD,CAAuD,UAACvO,QAAD;;;AAC7D8N,QAAAA,oBAAoB,gBACfA,oBADe,6BAEjB/N,OAFiB,2CAGb+N,oBAHa,2DAGb,uBAAuB/N,OAAvB,CAHa,6BAIfQ,OAJe,IAILP,QAJK,0BAApB;AAOA,eAAOA,QAAP;AACD,OATO;AAWjB,KAnCH;AAAA;AAAA;AAAA;AAqCE;;;;;;AArCF;;AAAA,UA2CsBwO,aA3CtB,0BA4CIxN,MA5CJ,EA6CIC,MA7CJ,EA8CIgN,QA9CJ;AAAA;UA8CIA,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAACpN,MAAM,CAACjB,OAAR,CAAX;AAE7B,QAAUiB,MAAM,CAACjB,OAAP,KAAmBkB,MAAM,CAAClB,OAApC,4CAAAK,SAAS,QAAoC,UAApC,CAAT,GAAAA,SAAS,OAAT;AACA,UAAMG,OAAO,GAAGgB,IAAI,CAACM,UAAL,CAAgBb,MAAhB,EAAwBC,MAAxB,CAAhB;6BACqC,IAAIoN,QAAJ,CAAa9N,OAAb,EAAsBkO,cAAc,CAACC,GAArC,EAA0CT,QAA1C,EAAoDU,WAApD;YAA9BC;YAAWC;AAClB,YAAMC,QAAQ,GAAG9N,MAAM,CAACJ,WAAP,CAAmBK,MAAnB,IAA6B,CAAC2N,SAAD,EAAYC,SAAZ,CAA7B,GAAsD,CAACA,SAAD,EAAYD,SAAZ,CAAvE;AACA,eAAO,IAAIrN,IAAJ,CACH2B,gBAAc,CAACC,aAAf,CAA6BnC,MAA7B,EAAqC8N,QAAQ,CAAC,CAAD,CAA7C,CADG,EAEH5L,gBAAc,CAACC,aAAf,CAA6BlC,MAA7B,EAAqC6N,QAAQ,CAAC,CAAD,CAA7C,CAFG,CAAP;;AAID,KAxDH;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;"}